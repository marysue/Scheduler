[{"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/index.js":"1","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/App.js":"2","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/configureStore.js":"3","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/Theme.js":"4","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/UsersList.js":"5","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/User.js":"6","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/NavBar.js":"7","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/services/auth.js":"8","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/ProtectedRoute.js":"9","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/LoginForm.js":"10","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/SignUpForm.js":"11","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/LogoutButton.js":"12","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/authentication.js":"13","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/config.js":"14","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/SplashPage.js":"15","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/Calendar.js":"16","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/header.js":"17","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/styles.js":"18","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/build.js":"19","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyInfo.js":"20","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorInfo.js":"21","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/blocked.js":"22","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/placement.js":"23","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/company.js":"24","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/contractor.js":"25","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorView.js":"26","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorPlacementTable.js":"27","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/DayCard.js":"28","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/GridComponent.js":"29","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/BlockedCard.js":"30","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyView.js":"31","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyView.js":"32","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyPlacementTable.js":"33","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyPlacementTable.js":"34","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyAddPlacement.js":"35"},{"size":434,"mtime":1607535137719,"results":"36","hashOfConfig":"37"},{"size":4405,"mtime":1608872965142,"results":"38","hashOfConfig":"37"},{"size":695,"mtime":1608573478528,"results":"39","hashOfConfig":"37"},{"size":548,"mtime":1607535137702,"results":"40","hashOfConfig":"37"},{"size":719,"mtime":1607535137711,"results":"41","hashOfConfig":"37"},{"size":832,"mtime":1607535137710,"results":"42","hashOfConfig":"37"},{"size":1776,"mtime":1608872885569,"results":"43","hashOfConfig":"37"},{"size":1016,"mtime":1607018667135,"results":"44","hashOfConfig":"37"},{"size":381,"mtime":1607535137714,"results":"45","hashOfConfig":"37"},{"size":18247,"mtime":1608841235209,"results":"46","hashOfConfig":"37"},{"size":8343,"mtime":1608573478522,"results":"47","hashOfConfig":"37"},{"size":2628,"mtime":1608841235209,"results":"48","hashOfConfig":"37"},{"size":7118,"mtime":1608573478525,"results":"49","hashOfConfig":"37"},{"size":82,"mtime":1607535137717,"results":"50","hashOfConfig":"37"},{"size":173,"mtime":1607535137709,"results":"51","hashOfConfig":"37"},{"size":10040,"mtime":1608872328482,"results":"52","hashOfConfig":"37"},{"size":1548,"mtime":1608841235206,"results":"53","hashOfConfig":"37"},{"size":436,"mtime":1607285155533,"results":"54","hashOfConfig":"37"},{"size":557,"mtime":1607535137704,"results":"55","hashOfConfig":"37"},{"size":12410,"mtime":1608875301779,"results":"56","hashOfConfig":"37"},{"size":13211,"mtime":1608875251709,"results":"57","hashOfConfig":"37"},{"size":3516,"mtime":1608573628209,"results":"58","hashOfConfig":"37"},{"size":7867,"mtime":1608841235210,"results":"59","hashOfConfig":"37"},{"size":8182,"mtime":1608573478527,"results":"60","hashOfConfig":"37"},{"size":9188,"mtime":1608882013236,"results":"61","hashOfConfig":"37"},{"size":5531,"mtime":1608841235208,"results":"62","hashOfConfig":"37"},{"size":10991,"mtime":1608841235208,"results":"63","hashOfConfig":"37"},{"size":3990,"mtime":1608872473681,"results":"64","hashOfConfig":"37"},{"size":1932,"mtime":1608423200675,"results":"65","hashOfConfig":"37"},{"size":1225,"mtime":1608841235204,"results":"66","hashOfConfig":"37"},{"size":2605,"mtime":1608871590783,"results":"67","hashOfConfig":"37"},{"size":4694,"mtime":1608841235207,"results":"68","hashOfConfig":"37"},{"size":10300,"mtime":1608875410219,"results":"69","hashOfConfig":"37"},{"size":10297,"mtime":1608871910613,"results":"70","hashOfConfig":"37"},{"size":7957,"mtime":1608882152701,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"njrkyg",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"74"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/index.js",[],["149","150"],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/App.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/configureStore.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/Theme.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/UsersList.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/User.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/NavBar.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/services/auth.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/ProtectedRoute.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/LoginForm.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/SignUpForm.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/LogoutButton.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/authentication.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/config.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/SplashPage.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/Calendar.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/header.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/styles.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/build.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyInfo.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorInfo.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/blocked.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/placement.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/company.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/contractor.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorView.js",["151","152","153"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from \"moment\";\nimport { getAllBlocked, setBlocked} from '../store/blocked';\nimport { Button } from '@material-ui/core';\nimport { getContractorPlacements, getContractorPlacementCalendar, getContractorPlacementTableInfo, setPlacementInfo, setPlacementDates } from '../store/placement';\nimport  ContractorPlacementTable  from './ContractorPlacementTable';\nimport Calendar from './CalendarComponent/Calendar';\nimport { setContractorId } from '../store/contractor';\n\nconst ContractorView = () => {\n    console.log(\"Entered ContractorView\")\n    const dispatch = useDispatch();\n    const [datesBlocked, setDatesBlocked] = useState([]);\n    const contractorId = useSelector(state => state.contractor.contractorId);\n    // const [placements, setPlacements] = useState([]);\n    // const [placementDates, setPlacementDates] = useState();\n    const placements = useSelector(state => state.placement.placementInfo);\n    const placementDates = useSelector(state => state.placement.placementDates);\n\n    function getDateRange(startDate, endDate) {\n        let start = moment(startDate).local();\n        let end = moment(endDate).local();\n        // console.log(\"Local start date:  \", start.format('MM/DD/YY hh:mm:ss'))\n\n        let diff = end.diff(start, 'days') + 1;\n        let thisDay = start.local().format('MM/DD/YYYY');\n        let range = [];\n        range.push(start)\n        for (let i = 1; i !== diff + 1; i++) {\n            let tmpDay = moment(thisDay).local();\n            range.push(tmpDay);\n            thisDay = tmpDay.add(1, 'day').format('MM/DD/YYYY hh:mm:ss')\n        }\n        // for (let i = 0; i < range.length; i++) {\n        //     console.log(\"range[\", i, \"]: \", range[i].format('MM/DD/YYYY hh:mm:ss'));\n        // }\n        return range;\n    }\n\n    useEffect (() => {\n        if (!contractorId) {\n            console.log(\"ContractorView: No contractor Id - getting it from local storage\")\n            let cid = window.localStorage.getItem(\"contractorId\");\n            if (cid) {\n             dispatch(setContractorId(cid));\n            }\n        }\n        if (!placements) {\n        (async() => {\n            const blockedDates = await getAllBlocked(contractorId);\n            if (!blockedDates.errors) {\n                let bd = blockedDates[\"blockedDates\"]\n                const blockedArr = []\n                for (let i = 0; i < bd.length; i++) {\n                    // console.log(\"Received date blocked: \", bd[i].blocked)\n                    const date = bd[i].blocked.replace(\" GMT\", \"\")\n                    // console.log(\"date: \", date);\n                    // console.log(\"Tranforming into moment: \", moment(date).format('MM/DD/YYYY HH:mm:ss'));\n                    // console.log(\"Transforming into local : \", moment(bd[i].blocked).local());\n                    blockedArr.push(moment(date).local());\n                }\n                console.log(\"Blocked array in ContractorView: \")\n                for (let i = 0; i < blockedArr.length; i++) {\n                    console.log(\"     \", blockedArr[i].format('MM/DD/YYYY HH:mm:ss'));\n\n                }\n                setDatesBlocked(blockedArr);\n                dispatch(setBlocked(blockedArr));\n            } else {\n                console.log(\"ContractorView:  Error from getAllBlocked fetch call\");\n            }\n            console.log(\"Getting placements for this contractor\")\n            // const p = await getContractorPlacements(contractorId);\n            const p = await getContractorPlacementTableInfo(contractorId);\n            if (!p.errors) {\n                console.log(\"ContractorView: Placements set as:  \", p)\n                //setPlacements(p)\n                console.log(\"ContractorView: Setting placement info in redux store...\")\n                dispatch(setPlacementInfo(p))\n            } else {\n                console.log(\"ContractorView: Error in getContractorPlacementTableInfo fetch call\")\n            }\n            const pd = await getContractorPlacementCalendar(contractorId);\n            if (!pd.errors) {\n                console.log(\"ContractorView: Placement Dates set as: \", pd)\n                //setPlacementDates(pd)\n                console.log(\"ContractorView: Setting placementDates in redux store...\")\n                dispatch(setPlacementDates(pd));\n            } else {\n                console.log(\"ContractorView: Error with getContractorPlacementCalendar fetch call\");\n            }\n        })();\n\n    }\n\n    }, [contractorId, placements] )\n\n    const saveDates = async () => {\n        // const blocked = createBlocked(contractorId, datesBlocked)\n        dispatch(setBlocked(datesBlocked));\n\n    }\n\n    if (!contractorId) {\n        console.log('Contractor Id is not set on login');\n        return null\n    } else {\n        return (\n            <>\n                <Calendar key={\"contrCalendar\"} datesBlocked={datesBlocked} placements={placements} placementDates={placementDates} setDatesBlocked={setDatesBlocked} userType={\"contractor\"}></Calendar>\n                {/* <Calendar datesBlocked={datesBlocked} placements={placements} placementDates={placementDates} setDatesBlocked={setDatesBlocked}></Calendar> */}\n                <Button onClick={saveDates} style={{backgroundColor: \"#616161\", color: \"white\", marginTop:\"5px\", marginLeft:\"80%\"}}>SAVE</Button>\n                <ContractorPlacementTable></ContractorPlacementTable>\n            </>\n        );\n    }\n}\n\nexport default ContractorView;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorPlacementTable.js",["154","155"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport moment from 'moment';\n\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'companyName', numeric: false, disablePadding: true, label: 'Company Name' },\n  { id: 'contact', numeric: false, disablePadding: false, label: 'Contact' },\n  { id: 'phone', numeric: false, disablePadding: false, label: 'Phone' },\n  { id: 'email', numeric: false, disablePadding: false, label: 'Email' },\n  { id: 'address', numeric: false, disablePadding: false, label: 'Address' },\n  { id: 'startDate', numeric: false, disablePadding: false, label: 'Start Date' },\n  { id: 'endDate', numeric: false, disablePadding: false, label: 'End Date' }\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  const userType = useSelector(state => state.authentication.userType);\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Contractor Schedule\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    padding: '20px',\n  },\n  tableCell: {\n    paddingLeft: \"20px\",\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nconst ContractorPlacementTable = () => {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const userType = useSelector(state => state.authentication.userType);\n  const placements = useSelector(state => state.placement.placementInfo)\n  console.log(\"*****************PlacementsTable View********************\")\n\n  useEffect (() => {\n    if (placements) {\n      for (let i = 0; i < placements.length; i++) {\n        console.log(\"Placements: \", placements[i]);\n      }\n    } else {\n        console.log(\"Placements:  No placements yet...\")\n    }\n  }, [placements] )\n\n  function createData(companyName, contact, phone, email, address, startDate, endDate) {\n      return { companyName, contact, phone, email, address, startDate, endDate };\n    }\n\n  const rows = [];\n\nif(placements) {\n    const placementArr = placements.placements;\n\n    console.log(\"We have placements[0]: \", placementArr[0])\n\n\n    for (let i=0; i < placementArr.length; i++) {\n        let start = moment(placementArr[i].companyInfo.startDate).format('MM/DD/YYYY');\n        let end = moment(placementArr[i].companyInfo.endDate).format('MM/DD/YYYY');\n        let address = placementArr[i].companyInfo.address + \", \" + placementArr[i].companyInfo.city\n        rows.push(createData(\n          placementArr[i].companyInfo.companyName,\n          placementArr[i].companyInfo.name,\n          placementArr[i].companyInfo.phone,\n          placementArr[i].companyInfo.email,\n          address,\n          start.toString(),\n          end.toString(), ));\n        }\n\n      }\n      console.log(\"rows.length:  \", rows.length)\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} padding={\"none\"}/>\n        <TableContainer className={classes.tableCell}>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              paddingLeft=\"10px\"\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                    return (\n                      <TableRow key={index}>\n                        <TableCell align=\"left\">{row.companyName}</TableCell>\n                        <TableCell align=\"left\">{row.contact}</TableCell>\n                        <TableCell align=\"left\">{row.phone}</TableCell>\n                        <TableCell align=\"left\">{row.email}</TableCell>\n                        <TableCell align=\"left\">{row.address}</TableCell>\n                        <TableCell align=\"left\">{row.startDate}</TableCell>\n                        <TableCell align=\"left\">{row.endDate}</TableCell>\n                      </TableRow>\n                    )\n                })}\n\n\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}\n\nexport default ContractorPlacementTable;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/DayCard.js",["156","157","158"],"import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport moment from 'moment';\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"145px\",\n    height: \"100px\",\n    backgroundColor: \"#616161\",\n    color: \"white\",\n    borderRadius: \"4px\",\n  },\n  before: {\n    width: \"145px\",\n    height: \"100px\",\n    backgroundColor: \"#C5C9Cb\",\n    color: \"white\",\n    borderRadius: \"4px\",\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    // marginBottom: 12,\n  },\n});\nlet once = true\nexport default function DayCard({ day, handleDateClicked, userType}) {\n  const placements = useSelector ( state => state.placement.placementInfo );\n  const placementDates = useSelector(state => state.placement.placementDates);\n  // console.log(\"Calendar: placements: \", placements);\n  // console.log(\"Calendar: placementDates: \", placementDates);\n  console.log(\"************************Day Card View************************\")\n    const classes = useStyles();\n\n    function dayInPlacements(day) {\n      const dayStr = day.format('YYYY-MM-DD')\n\n      if (placementDates) {\n        if (dayStr in placementDates) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n\n      function beforeToday(day) {\n        //console.log(\"DayCard: beforeToday(day)\");\n        return moment(day).local().isBefore(new Date(), \"day\");\n      }\n\n    // const bull = <span className={classes.bullet}>•</span>;\n\nconst getPlacementInfo = (day) => {\n    let dayArray = placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(`<div key={${index}}>{${item.companyInfo.companyName}}</div>`)\n      })\n      let retVal = \"\"\n      for (let i = 0 ; i < dayArray.length; i++) {\n        retVal += dayArray[i]\n      }\n      return retVal\n}\n\nif (!day) {\n  return null\n } else if (beforeToday(day)) {\n    return (\n    <Card className={classes.before}>\n      <CardContent>\n        <div>{day.format(\"D\").toString()}</div>\n          { dayInPlacements(day) && userType===\"contractor\"  ? placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(<div key={index}>{item.companyInfo.companyName}:{item.companyInfo.name}</div>)}) : null }\n          { dayInPlacements(day) && userType===\"company\"  ? placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(<div key={index}>{item.contractorInfo.name}:{item.contractorInfo.staffType}</div>)}) : null }\n          { dayInPlacements(day) && userType==='agency' ? placementDates[day.format('YYYY-MM-DD')].map((item,index) => {\n          return(<div key={index}>{item.companyInfo.companyName}:{item.companyInfo.name}</div>)}) : null }\n      </CardContent>\n    </Card>\n    )\n  } else {\n  return (\n    <Card key={\"cardKey\" } className={classes.root}>\n      <CardContent key={\"cardContent\"} onClick={ (e) => handleDateClicked(e, day)}>\n        <div key={day.format(\"D\").toString()} >{day.format(\"D\").toString()}</div>\n\n      { dayInPlacements(day) && userType===\"contractor\"  ? placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(<div key={index}>{item.companyInfo.companyName}:{item.companyInfo.name}</div>)}) : null }\n      { dayInPlacements(day) && userType===\"company\" ? placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(<div key={index}>{item.contractorInfo.name}:{item.contractorInfo.staffType}</div>)}) : null }\n      { dayInPlacements(day) && userType==='agency' ? placementDates[day.format('YYYY-MM-DD')].map((item,index) => {\n          return(<div key={index}>{item.contractorInfo.name}:{item.contractorInfo.staffType}</div>)}) : null }\n      </CardContent>\n    </Card>\n    // <div onClick={ (e) => handleDateClicked(e, day)}>{day.format(\"D\").toString()}</div>\n  );\n  }\n  }\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/GridComponent.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/BlockedCard.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyView.js",["159","160"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import moment from \"moment\";\nimport { Button } from '@material-ui/core';\nimport  AgencyPlacementTable  from './AgencyPlacementTable';\nimport NewCalendar from './CalendarComponent/Calendar';\nimport CompanyPlacementTable from './CompanyPlacementTable';\nimport { getAllAgencyTableInfo, getAllAgencyCalendarInfo, setPlacementInfo, setPlacementDates } from '../store/placement';\n\nconst AgencyView = () => {\n    console.log(\"Entered AgencyView\")\n    const dispatch = useDispatch();\n    const placements = useSelector(state => state.placement.placementInfo);\n    const placementDates = useSelector(state => state.placement.placementDates);\n\n    console.log(\" *********************Entered Agency View********************\")\n\n    useEffect (() => {\n\n\n            (async() => {\n                console.log(\"Getting placements for agency\")\n                const p = await getAllAgencyTableInfo();\n                if (!p.errors) {\n                    console.log(\"AgencyView: Placements set as:  \", p)\n                    console.log(\"AgencyView: Setting placement info in redux store...\")\n                    dispatch(setPlacementInfo(p))\n                } else {\n                    console.log(\"AgencyView: Error in getCompanyPlacementTableInfo fetch call\")\n                }\n                const pd = await getAllAgencyCalendarInfo();\n                if (!pd.errors) {\n                    console.log(\"AgencyView: Placement Dates set as: \", pd)\n                    console.log(\"AgencyView: Setting placementDates in redux store...\")\n                    dispatch(setPlacementDates(pd));\n                } else {\n                    console.log(\"AgencyView: Error with getCompanyPlacementCalendar fetch call\");\n                }\n            })()\n\n    }, []) ;\n\n    const savePlacement= async () => {\n        console.log(\"save Placement to backend - needs to be implemented\")\n    }\n\n    return (\n        <>\n            <NewCalendar key={\"newCalendar\"} placements={placements} placementDates={placementDates} datesBlocked={[]} userType={'company'}></NewCalendar>\n            {/* <Calendar datesBlocked={datesBlocked} placements={placements} placementDates={placementDates} setDatesBlocked={setDatesBlocked}></Calendar> */}\n            <Button key={\"buttonKey\"} onClick={savePlacement} style={{backgroundColor: \"#616161\", color: \"white\", marginTop:\"5px\", marginLeft:\"80%\"}}>SAVE</Button>\n            <AgencyPlacementTable key={\"coPlacement\"} ></AgencyPlacementTable>\n        </>\n    );\n\n}\n\nexport default AgencyView;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyView.js",["161","162"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from \"moment\";\nimport { Button } from '@material-ui/core';\nimport  CompanyPlacementTable  from './CompanyPlacementTable';\nimport NewCalendar from './CalendarComponent/Calendar';\nimport { setCompanyId } from '../store/company';\nimport { getCompanyPlacementTableInfo, getCompanyPlacementCalendarInfo, setPlacementInfo, setPlacementDates } from '../store/placement';\n\nconst CompanyView = () => {\n    console.log(\"Entered CompanyView\")\n    const dispatch = useDispatch();\n    const companyId = useSelector(state => state.company.companyId);\n    const placements = useSelector(state => state.placement.placementInfo);\n    const placementDates = useSelector(state => state.placement.placementDates);\n\n    console.log(\" *********Entered Company View**************\")\n\n    // function printRange(message, range) {\n    //     console.log(message);\n    //     for (let i = 0; i < range.length; i++) {\n    //         console.log(\"     range[\", i, \"]: \", range[i].format('MM/DD/YYYY hh:mm:ss'));\n    //     }\n    // }\n\n    function getDateRange(startDate, endDate, pdArr) {\n\n        let start = moment(startDate);\n        let end = moment(endDate);\n\n        let diff = end.diff(start, 'days') + 1;\n        let thisDay = start.local().format('MM/DD/YYYY');\n        let range = [...pdArr];\n        for (let i = 0; i < range; i++) {\n            console.log(\"     range[\", i, \"]: \", range[i].format('MM/DD/YYYY hh:mm:ss'))\n        }\n        //range.push(start)\n        for (let i = 1; i !== diff + 1; i++) {\n            let duplicate = false;\n            let tmpDay = moment(thisDay).local();\n\n            for (let k = 0; k < range.length; k++) {\n                let rangeStart = range[k].startOf('day');\n                let tmpStart = tmpDay.startOf('day');\n\n                if (rangeStart.isSame(tmpStart)) {\n                    duplicate = true;\n                }\n            }\n\n            if (!duplicate) {\n                range.push(tmpDay);\n            }\n            let tmpTmpDay = moment(tmpDay.format(\"MM/DD/YYYY hh:mm:ss\"))\n            thisDay = tmpTmpDay.add(1, 'day').format('MM/DD/YYYY hh:mm:ss')\n        }\n        for (let i = 0; i < range.length; i++) {\n            console.log(\"range[\", i, \"]: \", range[i].format('MM/DD/YYYY hh:mm:ss'));\n        }\n        return range;\n    }\n\n    useEffect (() => {\n        if (!companyId) {\n            let cid = window.localStorage.getItem(\"companyId\");\n            if (cid) {\n             dispatch(setCompanyId(cid));\n            }\n        }\n        if (!placements) {\n            (async() => {\n                console.log(\"Getting placements for this company\")\n                const p = await getCompanyPlacementTableInfo(companyId);\n                if (!p.errors) {\n                    console.log(\"CompanyView: Placements set as:  \", p)\n                    console.log(\"CompanyView: Setting placement info in redux store...\")\n                    dispatch(setPlacementInfo(p))\n                } else {\n                    console.log(\"CompanyView: Error in getCompanyPlacementTableInfo fetch call\")\n                }\n                const pd = await getCompanyPlacementCalendarInfo(companyId);\n                if (!pd.errors) {\n                    console.log(\"CompanyView: Placement Dates set as: \", pd)\n                    console.log(\"CompanyView: Setting placementDates in redux store...\")\n                    dispatch(setPlacementDates(pd));\n                } else {\n                    console.log(\"CompanyView: Error with getCompanyPlacementCalendar fetch call\");\n                }\n            })()\n        }\n    },[companyId] );\n\n    const savePlacement= async () => {\n        console.log(\"save Placement to backend - needs to be implemented\")\n        //const placement = createPlacement(companyId, )\n        //dispatch(setPlacement(placement));\n    }\n\n    if (!companyId) {\n        console.log('Company Id is not set on login');\n        return null\n    } else {\n        return (\n            <>\n                <NewCalendar key={\"newCalendar\"} placements={placements} placementDates={placementDates} datesBlocked={[]} userType={'company'}></NewCalendar>\n                {/* <Calendar datesBlocked={datesBlocked} placements={placements} placementDates={placementDates} setDatesBlocked={setDatesBlocked}></Calendar> */}\n                <Button key={\"buttonKey\"} onClick={savePlacement} style={{backgroundColor: \"#616161\", color: \"white\", marginTop:\"5px\", marginLeft:\"80%\"}}>SAVE</Button>\n                <CompanyPlacementTable key={\"coPlacement\"} ></CompanyPlacementTable>\n            </>\n        );\n    }\n}\n\nexport default CompanyView;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyPlacementTable.js",["163"],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyPlacementTable.js",["164"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport { Table,\n         TableBody,\n        TableCell,\n        TableContainer,\n        TableHead,\n        TablePagination,\n        TableRow,\n        TableSortLabel,\n        Toolbar,\n        Typography,\n        Paper,\n        IconButton,\n        Tooltip,\n        FormControlLabel,\n        Switch } from '@material-ui/core'\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport moment from 'moment';\n\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Name' },\n  { id: 'staffType', numeric: false, disablePadding: true, label: 'Staff Type' },\n  { id: 'phone', numeric: false, disablePadding: false, label: 'Phone' },\n  { id: 'email', numeric: false, disablePadding: false, label: 'Email' },\n  { id: 'city', numeric: false, disablePadding: false, label: 'City' },\n  { id: 'startDate', numeric: false, disablePadding: false, label: 'Start Date' },\n  { id: 'endDate', numeric: false, disablePadding: false, label: 'End Date' }\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  const userType = useSelector(state => state.authentication.userType);\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Contractor Schedule\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    padding: '20px',\n  },\n  tableCell: {\n    paddingLeft: \"20px\",\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nconst AgencyPlacementTable = () => {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const placements = useSelector(state => state.placement.placementInfo)\n  console.log(\" ********************PlacementsTable View********************\")\n  useEffect (() => {\n    if (placements) {\n      for (let i = 0; i < placements.length; i++) {\n        console.log(\"Placements: \", placements[i]);\n      }\n    } else {\n        console.log(\"Placements:  No placements yet...\")\n    }\n  }, [placements] )\n\n  function createData(name, staffType, phone, email, city, startDate, endDate) {\n      return { name, staffType, phone, email, city, startDate, endDate };\n    }\n\n  const rows = [];\n\nif(placements) {\n    const placementArr = placements.placements;\n\n    console.log(\"We have placements[0]: \", placementArr[0])\n\n\n    for (let i=0; i < placementArr.length; i++) {\n        let start = moment(placementArr[i].contractorInfo.startDate).format('MM/DD/YYYY');\n        let end = moment(placementArr[i].contractorInfo.endDate).format('MM/DD/YYYY');\n        let city = placementArr[i].contractorInfo.city\n        rows.push(createData(\n          placementArr[i].contractorInfo.name,\n          placementArr[i].contractorInfo.staffType,\n          placementArr[i].contractorInfo.phone,\n          placementArr[i].contractorInfo.email,\n          city,\n          start.toString(),\n          end.toString(), ));\n        }\n\n      }\n      console.log(\"rows.length:  \", rows.length)\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} padding={\"none\"}/>\n        <TableContainer className={classes.tableCell}>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              paddingLeft=\"10px\"\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                    return (\n                      <TableRow key={index}>\n                        <TableCell align=\"left\">{row.name}</TableCell>\n                        <TableCell align=\"left\">{row.staffType}</TableCell>\n                        <TableCell align=\"left\">{row.phone}</TableCell>\n                        <TableCell align=\"left\">{row.email}</TableCell>\n                        <TableCell align=\"left\">{row.city}</TableCell>\n                        <TableCell align=\"left\">{row.startDate}</TableCell>\n                        <TableCell align=\"left\">{row.endDate}</TableCell>\n                      </TableRow>\n                    )\n                })}\n\n\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}\n\nexport default AgencyPlacementTable;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyAddPlacement.js",["165","166","167","168","169","170","171","172","173","174"],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":6,"column":10,"nodeType":"181","messageId":"182","endLine":6,"endColumn":33},{"ruleId":"179","severity":1,"message":"183","line":21,"column":14,"nodeType":"181","messageId":"182","endLine":21,"endColumn":26},{"ruleId":"184","severity":1,"message":"185","line":97,"column":8,"nodeType":"186","endLine":97,"endColumn":34,"suggestions":"187"},{"ruleId":"179","severity":1,"message":"188","line":69,"column":9,"nodeType":"181","messageId":"182","endLine":69,"endColumn":17},{"ruleId":"179","severity":1,"message":"188","line":207,"column":9,"nodeType":"181","messageId":"182","endLine":207,"endColumn":17},{"ruleId":"179","severity":1,"message":"189","line":35,"column":5,"nodeType":"181","messageId":"182","endLine":35,"endColumn":9},{"ruleId":"179","severity":1,"message":"190","line":37,"column":9,"nodeType":"181","messageId":"182","endLine":37,"endColumn":19},{"ruleId":"179","severity":1,"message":"191","line":63,"column":7,"nodeType":"181","messageId":"182","endLine":63,"endColumn":23},{"ruleId":"179","severity":1,"message":"192","line":7,"column":8,"nodeType":"181","messageId":"182","endLine":7,"endColumn":29},{"ruleId":"184","severity":1,"message":"185","line":41,"column":8,"nodeType":"186","endLine":41,"endColumn":10,"suggestions":"193"},{"ruleId":"179","severity":1,"message":"183","line":26,"column":14,"nodeType":"181","messageId":"182","endLine":26,"endColumn":26},{"ruleId":"184","severity":1,"message":"194","line":91,"column":7,"nodeType":"186","endLine":91,"endColumn":18,"suggestions":"195"},{"ruleId":"179","severity":1,"message":"188","line":69,"column":9,"nodeType":"181","messageId":"182","endLine":69,"endColumn":17},{"ruleId":"179","severity":1,"message":"188","line":69,"column":9,"nodeType":"181","messageId":"182","endLine":69,"endColumn":17},{"ruleId":"179","severity":1,"message":"196","line":2,"column":27,"nodeType":"181","messageId":"182","endLine":2,"endColumn":36},{"ruleId":"179","severity":1,"message":"197","line":8,"column":3,"nodeType":"181","messageId":"182","endLine":8,"endColumn":21},{"ruleId":"179","severity":1,"message":"198","line":11,"column":25,"nodeType":"181","messageId":"182","endLine":11,"endColumn":38},{"ruleId":"179","severity":1,"message":"199","line":28,"column":9,"nodeType":"181","messageId":"182","endLine":28,"endColumn":15},{"ruleId":"179","severity":1,"message":"200","line":32,"column":10,"nodeType":"181","messageId":"182","endLine":32,"endColumn":15},{"ruleId":"179","severity":1,"message":"201","line":91,"column":9,"nodeType":"181","messageId":"182","endLine":91,"endColumn":15},{"ruleId":"179","severity":1,"message":"202","line":96,"column":9,"nodeType":"181","messageId":"182","endLine":96,"endColumn":21},{"ruleId":"179","severity":1,"message":"203","line":101,"column":9,"nodeType":"181","messageId":"182","endLine":101,"endColumn":26},{"ruleId":"204","severity":1,"message":"205","line":128,"column":77,"nodeType":"206","messageId":"207","endLine":128,"endColumn":78},{"ruleId":"208","severity":1,"message":"209","line":238,"column":60,"nodeType":"210","messageId":"211","endLine":238,"endColumn":62},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'getContractorPlacements' is defined but never used.","Identifier","unusedVar","'getDateRange' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["214"],"'userType' is assigned a value but never used.","'once' is assigned a value but never used.","'placements' is assigned a value but never used.","'getPlacementInfo' is assigned a value but never used.","'CompanyPlacementTable' is defined but never used.",["215"],"React Hook useEffect has missing dependencies: 'dispatch' and 'placements'. Either include them or remove the dependency array.",["216"],"'useEffect' is defined but never used.","'KeyboardTimePicker' is defined but never used.","'TextValidator' is defined but never used.","'userId' is assigned a value but never used.","'state' is assigned a value but never used.","'cancel' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleStateChange' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},"Update the dependencies array to be: [contractorId, dispatch, placements]",{"range":"223","text":"224"},"Update the dependencies array to be: [dispatch]",{"range":"225","text":"226"},"Update the dependencies array to be: [companyId, dispatch, placements]",{"range":"227","text":"228"},[4547,4573],"[contractorId, dispatch, placements]",[1845,1847],"[dispatch]",[3673,3684],"[companyId, dispatch, placements]"]