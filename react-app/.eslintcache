[{"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/index.js":"1","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/App.js":"2","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/configureStore.js":"3","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/Theme.js":"4","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/UsersList.js":"5","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/User.js":"6","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/NavBar.js":"7","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/services/auth.js":"8","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/ProtectedRoute.js":"9","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/LoginForm.js":"10","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/SignUpForm.js":"11","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/LogoutButton.js":"12","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/authentication.js":"13","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/config.js":"14","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/SplashPage.js":"15","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/Calendar.js":"16","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/header.js":"17","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/styles.js":"18","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/build.js":"19","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyInfo.js":"20","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorInfo.js":"21","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/blocked.js":"22","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/placement.js":"23","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/company.js":"24","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/contractor.js":"25","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorView.js":"26","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorPlacementTable.js":"27","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/DayCard.js":"28","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/GridComponent.js":"29","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/BlockedCard.js":"30","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyView.js":"31","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyView.js":"32","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyPlacementTable.js":"33","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyPlacementTable.js":"34","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyAddPlacement.js":"35","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyPlacementPickerTable.js":"36","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/utils/utils.js":"37","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/agencyInfo.js":"38","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyCompanies.js":"39","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyContractors.js":"40","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyCompanyPlacementTable.js":"41","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/agencyCompanyPlacements.js":"42","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/agencyContractorPlacements.js":"43","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyContractorPlacementTable.js":"44","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyContractorPlacements.js":"45","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyCompanyPlacements.js":"46","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyCompanyTable.js":"47","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyContractorsTable.js":"48"},{"size":434,"mtime":1607535137719,"results":"49","hashOfConfig":"50"},{"size":5278,"mtime":1609031272714,"results":"51","hashOfConfig":"50"},{"size":949,"mtime":1609025581245,"results":"52","hashOfConfig":"50"},{"size":548,"mtime":1607535137702,"results":"53","hashOfConfig":"50"},{"size":719,"mtime":1607535137711,"results":"54","hashOfConfig":"50"},{"size":832,"mtime":1607535137710,"results":"55","hashOfConfig":"50"},{"size":3574,"mtime":1609031191822,"results":"56","hashOfConfig":"50"},{"size":1016,"mtime":1607018667135,"results":"57","hashOfConfig":"50"},{"size":381,"mtime":1607535137714,"results":"58","hashOfConfig":"50"},{"size":16387,"mtime":1609024037689,"results":"59","hashOfConfig":"50"},{"size":8343,"mtime":1608573478522,"results":"60","hashOfConfig":"50"},{"size":2764,"mtime":1608929443871,"results":"61","hashOfConfig":"50"},{"size":7118,"mtime":1608573478525,"results":"62","hashOfConfig":"50"},{"size":82,"mtime":1607535137717,"results":"63","hashOfConfig":"50"},{"size":173,"mtime":1607535137709,"results":"64","hashOfConfig":"50"},{"size":10249,"mtime":1609019006635,"results":"65","hashOfConfig":"50"},{"size":1548,"mtime":1608841235206,"results":"66","hashOfConfig":"50"},{"size":436,"mtime":1607285155533,"results":"67","hashOfConfig":"50"},{"size":557,"mtime":1607535137704,"results":"68","hashOfConfig":"50"},{"size":12410,"mtime":1608875301779,"results":"69","hashOfConfig":"50"},{"size":13211,"mtime":1608875251709,"results":"70","hashOfConfig":"50"},{"size":3516,"mtime":1608573628209,"results":"71","hashOfConfig":"50"},{"size":8152,"mtime":1608935254821,"results":"72","hashOfConfig":"50"},{"size":8986,"mtime":1608929882232,"results":"73","hashOfConfig":"50"},{"size":10001,"mtime":1608926392536,"results":"74","hashOfConfig":"50"},{"size":5531,"mtime":1608841235208,"results":"75","hashOfConfig":"50"},{"size":10999,"mtime":1608938547961,"results":"76","hashOfConfig":"50"},{"size":3997,"mtime":1609020929968,"results":"77","hashOfConfig":"50"},{"size":1932,"mtime":1608423200675,"results":"78","hashOfConfig":"50"},{"size":1225,"mtime":1608841235204,"results":"79","hashOfConfig":"50"},{"size":3547,"mtime":1609025738478,"results":"80","hashOfConfig":"50"},{"size":5303,"mtime":1609021134944,"results":"81","hashOfConfig":"50"},{"size":10248,"mtime":1608938479050,"results":"82","hashOfConfig":"50"},{"size":10695,"mtime":1609028981088,"results":"83","hashOfConfig":"50"},{"size":10236,"mtime":1609023509034,"results":"84","hashOfConfig":"50"},{"size":13893,"mtime":1608938672511,"results":"85","hashOfConfig":"50"},{"size":767,"mtime":1608937391282,"results":"86","hashOfConfig":"50"},{"size":2208,"mtime":1609017894671,"results":"87","hashOfConfig":"50"},{"size":826,"mtime":1609092667421,"results":"88","hashOfConfig":"50"},{"size":239,"mtime":1609092438294,"results":"89","hashOfConfig":"50"},{"size":11056,"mtime":1609093083577,"results":"90","hashOfConfig":"50"},{"size":2531,"mtime":1609025450171,"results":"91","hashOfConfig":"50"},{"size":2755,"mtime":1609025476941,"results":"92","hashOfConfig":"50"},{"size":10537,"mtime":1609093100900,"results":"93","hashOfConfig":"50"},{"size":2143,"mtime":1609031112742,"results":"94","hashOfConfig":"50"},{"size":1579,"mtime":1609031100524,"results":"95","hashOfConfig":"50"},{"size":10903,"mtime":1609092655779,"results":"96","hashOfConfig":"50"},{"size":10201,"mtime":1609092994165,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"njrkyg",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"100"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"100"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/index.js",[],["208","209"],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/App.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/configureStore.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/Theme.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/UsersList.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/User.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/NavBar.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/services/auth.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/ProtectedRoute.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/LoginForm.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/SignUpForm.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/auth/LogoutButton.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/authentication.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/config.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/SplashPage.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/Calendar.js",["210"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector } from 'react-redux';\nimport moment from \"moment\";\nimport Header from \"./header\";\nimport { v4 as uuidv4 } from 'uuid';\nimport buildCalendar from './build';\nimport DayCard from './DayCard';\nimport BlockedCard from './BlockedCard';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n      maxWidth: \"1054px\",\n      // flexBasis: \"100%\",\n      display: 'grid',\n      // gridAutoFlow: 'row',\n      // gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr 1fr 1fr\",\n      // margin: \"0px\",\n      // padding: \"0px\",\n    //   gridColumnGap: \"0px\",\n\n    gridColumnStart: '1',\n    gridColumnEnd: '7',\n    gridTemplateColumns: \"repeat(7, 150px)\",\n    borderRadius: \"4px\",\n    // gridTemplateRows: \"150px\",\n    },\n    paper: {\n      padding: theme.spacing(1),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      whiteSpace: 'nowrap',\n      marginBottom: theme.spacing(1),\n    //   width: '100%',\n    //   height: '100%',\n    },\n    divider: {\n    //   margin: theme.spacing(2, 0),\n    },\n  }));\n\n\n\nexport default function Calendar({datesBlocked, setDatesBlocked, placements, placementDates, userType}) {\n  console.log(\"************************Calendar View************************\")\n  const [calendar, setCalendar] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(moment());\n  // const [blockedDatesChanged, setBlockedDatesChanged] = useState(false);\n  const classes = useStyles();\n  //const userType = useSelector(state => state.authentication.userType)\n\n  // *****************NOTE:  If ContractorView and Company View stop working it's\n  // *****************       because I'm now passing placements through as a prop.\n  // const placements = useSelector ( state => state.placement.placementInfo );\n  // const placementDates = useSelector(state => state.placement.placementDates);\n  // console.log(\"Calendar: DatesBlocked: \", datesBlocked);\n  // console.log(\"Calendar: placements: \", placements);\n  // console.log(\"Calendar: placementDates: \", placementDates);\n\n  useEffect(() => {\n    setCalendar(buildCalendar(selectedDate));\n  }, [selectedDate]);\n\n  // function isSelected(day) {\n  //   if (dateRange.start !== '') {\n  //     const start = dateRange.start;\n  //     const end = dateRange.end;\n  //     const currentDay = day;\n\n  //     const inRange = moment(currentDay).isAfter(start) && moment(currentDay).isBefore(end)\n  //     const isBorderDate = moment(currentDay).isSame(end) || moment(currentDay).isSame(start);\n\n  //     return(inRange || isBorderDate)\n  //   }\n  // }\n  function dayInPlacements(day) {\n    console.log(\"Calendar: day = \", day.format('YYYY-MM-DD'));\n    const dayStr = day.format('YYYY-MM-DD')\n\n\n    if (dayStr in placementDates) {\n      console.log(\"Calendar: dayInPlacements: Found \", dayStr, \" in placementDates\");\n      return true;\n    } else {\n      console.log(\"Did not find \", dayStr, \" in placementDates\")\n      return false;\n    }\n\n    // for (let i=0; i < placementDates.length; i++) {\n    //    if (moment(day).local().isSame(placementDates[i], 'day')) {\n    //      return true;\n    //    }\n    //   }\n    // return false;\n\n  }\n  // function beforeToday(day) {\n  //   return moment(day).isBefore(new Date(), \"day\");\n  // }\n  // function isToday(day) {\n  //   return moment(new Date()).isSame(day, \"day\");\n  // }\n  // function dayStyles(day) {\n  //   //if (isSelected(day) || dayInBlocked(day)) {\n  //     if (dayInBlocked(day)) {\n  //       return \"selected\";\n  //   }\n\n  //   if (dayInPlacements(day)) {\n  //     return \"placement\";\n  //   }\n\n  //   if (beforeToday(day)) {\n  //     return \"before\";\n  //   }\n\n  //   if (isToday(day)) {\n  //     return \"today\";\n  //   }\n  //   return \"\";\n  // }\n  // function currMonthName() {\n  //   return value.format(\"MMMM\");\n  // }\n  // function currYear() {\n  //   return value.format(\"YYYY\");\n  // }\n  const printDatesArray = (da) => {\n    console.log(\"NewCalendar: printDatesArray(day)\");\n    for (let i = 0; i < da.length; i++) {\n      // console.log(da[i].format(\"MM/DD/YYYY\"))\n      console.log(da[i])\n    }\n  }\n  const addDateToBlocked = (start) => {\n    console.log(\"NewCalendar:  addDateToBlocked(start)\");\n    // console.log(\"Adding \", start.format('MM/DD/YYYY'));\n    // console.log(\"Before adding: \");\n    printDatesArray(datesBlocked);\n    if (!dayInBlocked(start)) {\n      let blocked = [ ...datesBlocked];\n      blocked.push(start);\n      setDatesBlocked(blocked);\n      // setBlockedDatesChanged(true);\n      // console.log(\"After adding date to blocked: \")\n     //printDatesArray(datesBlocked);\n    }\n\n  }\n  const removeDateBlocked = (day) => {\n    console.log(\"NewCalendar: removeDateBlocked(day)\");\n      let found = false;\n\n      for (let i=0; i < datesBlocked.length; i++) {\n        if (moment(day).isSame(datesBlocked[i], 'day')) {\n          console.log(\"Found : \", day.format(\"MM/DD/YYYY HH:mm:ss\"));\n          let newBlocked = [ ...datesBlocked]\n          newBlocked.splice(i, 1);\n          found = true;\n          console.log(\" Contents of newBlocked array after splice:  \");\n\n          setDatesBlocked([...newBlocked]);\n          printDatesArray(datesBlocked);\n          // setBlockedDatesChanged(true);\n          break;\n        }\n      }\n      // latency issue - datesBlocked won't be updated until component is remapped???\n      // console.log(\"removeDateBlocked:  Updated datesBlocked array:  \");\n      // for (let i=0; i < datesBlocked.length; i++) {\n      //   console.log(\"     \", datesBlocked[i].format('MM/DD/YYYY'))\n      // }\n\n\n      if (!found) {\n        console.log(\"Failed to remove \", day.format('MM/DD/YY HH:mm:ss'), \" from \", datesBlocked)\n      }\n  }\n  function dayInBlocked(day) {\n    // console.log(\"NewCalendar: dayInBlocked(day) \");\n    let thisDay = moment(day).local()\n    // console.log(\"This day:  \")\n    // console.log(\"     \",  thisDay.format('MM/DD/YY hh:mm:ss'));\n\n    for (let i=0; i < datesBlocked.length; i++) {\n      // console.log(\"datesBlocked[\", i, \"]: \", datesBlocked[i].format('MM/DD/YY HH:mm:ss'));\n      // console.log(\"datesBlocked[i].local(): \", datesBlocked[i].local().format('MM/DD/YY HH:mm:ss'));\n      //console.log(\"Calendar: dayInBlocked(\", day.format(\"MM/DD/YYYY\"), \" matches: \", datesBlocked[i].format(\"MM/DD/YYYY\"), \" : \", moment(day).isSame(datesBlocked[i], 'day'));\n      // console.log(\"datesBlocked[i] is a \", (typeof datesBlocked[i]));\n       if (thisDay.isSame(datesBlocked[i].local(), 'day')) {\n         return true;\n       }\n      }\n    return false;\n  }\n  // const addDateRangeToBlocked = (start, end) => {\n  //   //Only execute this function if the local state dateRange start and end have values\n  //   console.log(\"addDateRangeToBlocked: \", start.format('MM/DD/YYYY'), \" to \", end.format('MM/DD/YYYY'));\n  //   if (start !== '' && end !== '') {\n  //     addDateToBlocked(start);\n\n  //     const diff = start.diff(end, 'days');\n  //     console.log(\"Calendar: addDateRangeToBlocked: difference: \", diff);\n\n  //     if (diff > 1) {\n  //       for (let i=1; i < diff - 1; i++) {\n  //         let tmpDay = start;\n  //         tmpDay.add(i, 'day');\n  //         console.log(\"Calendar: addDateRangeToBlocked: Next day is:  \", tmpDay.format('MM/DD/YYYY'));\n  //         addDateToBlocked(tmpDay);\n  //       }\n  //       addDateToBlocked(end);\n  //       console.log(\"Calendar: addDateRangeToBlocked: New blocked dates:  \", datesBlocked);\n  //     }\n  //   }\n  // }\n  // function removeRangeFromBlocked(start, end) {\n  //   let thisDay = start;\n  //   while (!moment(thisDay).isSame(end, 'day')) {\n  //     removeDateBlocked(thisDay)\n  //     thisDay = moment(thisDay).add(1, 'days');\n  //   }\n  //   removeDateBlocked(thisDay) //remove the end date\n  // }\n  function handleDateClicked(e, day) {\n    console.log(\"NewCalendar: handleDateClicked\");\n    console.log(\"Day is: \", day)\n    printDatesArray(datesBlocked)\n    const today = moment().local();\n    if (day.local() >= today.startOf('day')) {\n      if (!dayInPlacements(day.local())) {\n        if (!dayInBlocked(day.local())) {\n          addDateToBlocked(day.local())\n        } else if (dayInBlocked(day.local())) {\n          removeDateBlocked(day.local());\n        }\n      } else {\n        console.log(\"Placement found for that date. Cannot block.\")\n      }\n    } else {\n      console.log(\"Today endOf day compared with day is:  \", (day >= today.startOf('day')));\n    }\n  }\n\n  return (\n      <>\n        <div >\n        <Grid  style={{color: \"white\", maxWidth: \"1050px\"}}  >\n            <Grid item xs={12}>\n                <div className=\"calendar\">\n                  <Header value={selectedDate} onChange={setSelectedDate}/>\n                </div>\n            </Grid>\n          </Grid>\n          <Grid container alignItems=\"center\"  style={{color: \"white\", backgroundColor: \"#616161\", maxWidth: \"1048px\", marginBottom:\"5px\"}} className={classes.container}  spacing={1}>\n              {[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"].map((d) => {\n                const uuid = uuidv4();\n                return (\n                  <Grid item className=\"week\"  key={uuid}>\n                    <div>\n                      <center ><h2 >{d}</h2></center>\n                      </div>\n                  </Grid>\n                )\n              })}\n          </Grid>\n          <Grid container className={classes.container} spacing={1}>\n            {calendar.map((week, wi) => {\n            const uuid = uuidv4();\n            wi = wi+uuid;\n\n            return (\n              <>\n\n                { week.map((day, di) => {\n                  di = di+uuid;\n                  return (\n                          <Grid item key={di}>\n                            {  dayInBlocked(day) ?\n                              <BlockedCard key={di+\"blocked\"} handleDateClicked={handleDateClicked} day={day}></BlockedCard> :\n                              <DayCard key={di+\"day\"} placements={placements} placementDates={placementDates} handleDateClicked={handleDateClicked} day={day} userType={userType}></DayCard> }\n                          </Grid>\n                  )\n                })}\n              </>\n            )})}\n          </Grid>\n      </div>\n    </>\n\n  );\n}\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/header.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/styles.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/build.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyInfo.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorInfo.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/blocked.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/placement.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/company.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/contractor.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorView.js",["211","212","213"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from \"moment\";\nimport { getAllBlocked, setBlocked} from '../store/blocked';\nimport { Button } from '@material-ui/core';\nimport { getContractorPlacements, getContractorPlacementCalendar, getContractorPlacementTableInfo, setPlacementInfo, setPlacementDates } from '../store/placement';\nimport  ContractorPlacementTable  from './ContractorPlacementTable';\nimport Calendar from './CalendarComponent/Calendar';\nimport { setContractorId } from '../store/contractor';\n\nconst ContractorView = () => {\n    console.log(\"Entered ContractorView\")\n    const dispatch = useDispatch();\n    const [datesBlocked, setDatesBlocked] = useState([]);\n    const contractorId = useSelector(state => state.contractor.contractorId);\n    // const [placements, setPlacements] = useState([]);\n    // const [placementDates, setPlacementDates] = useState();\n    const placements = useSelector(state => state.placement.placementInfo);\n    const placementDates = useSelector(state => state.placement.placementDates);\n\n    function getDateRange(startDate, endDate) {\n        let start = moment(startDate).local();\n        let end = moment(endDate).local();\n        // console.log(\"Local start date:  \", start.format('MM/DD/YY hh:mm:ss'))\n\n        let diff = end.diff(start, 'days') + 1;\n        let thisDay = start.local().format('MM/DD/YYYY');\n        let range = [];\n        range.push(start)\n        for (let i = 1; i !== diff + 1; i++) {\n            let tmpDay = moment(thisDay).local();\n            range.push(tmpDay);\n            thisDay = tmpDay.add(1, 'day').format('MM/DD/YYYY hh:mm:ss')\n        }\n        // for (let i = 0; i < range.length; i++) {\n        //     console.log(\"range[\", i, \"]: \", range[i].format('MM/DD/YYYY hh:mm:ss'));\n        // }\n        return range;\n    }\n\n    useEffect (() => {\n        if (!contractorId) {\n            console.log(\"ContractorView: No contractor Id - getting it from local storage\")\n            let cid = window.localStorage.getItem(\"contractorId\");\n            if (cid) {\n             dispatch(setContractorId(cid));\n            }\n        }\n        if (!placements) {\n        (async() => {\n            const blockedDates = await getAllBlocked(contractorId);\n            if (!blockedDates.errors) {\n                let bd = blockedDates[\"blockedDates\"]\n                const blockedArr = []\n                for (let i = 0; i < bd.length; i++) {\n                    // console.log(\"Received date blocked: \", bd[i].blocked)\n                    const date = bd[i].blocked.replace(\" GMT\", \"\")\n                    // console.log(\"date: \", date);\n                    // console.log(\"Tranforming into moment: \", moment(date).format('MM/DD/YYYY HH:mm:ss'));\n                    // console.log(\"Transforming into local : \", moment(bd[i].blocked).local());\n                    blockedArr.push(moment(date).local());\n                }\n                console.log(\"Blocked array in ContractorView: \")\n                for (let i = 0; i < blockedArr.length; i++) {\n                    console.log(\"     \", blockedArr[i].format('MM/DD/YYYY HH:mm:ss'));\n\n                }\n                setDatesBlocked(blockedArr);\n                dispatch(setBlocked(blockedArr));\n            } else {\n                console.log(\"ContractorView:  Error from getAllBlocked fetch call\");\n            }\n            console.log(\"Getting placements for this contractor\")\n            // const p = await getContractorPlacements(contractorId);\n            const p = await getContractorPlacementTableInfo(contractorId);\n            if (!p.errors) {\n                console.log(\"ContractorView: Placements set as:  \", p)\n                //setPlacements(p)\n                console.log(\"ContractorView: Setting placement info in redux store...\")\n                dispatch(setPlacementInfo(p))\n            } else {\n                console.log(\"ContractorView: Error in getContractorPlacementTableInfo fetch call\")\n            }\n            const pd = await getContractorPlacementCalendar(contractorId);\n            if (!pd.errors) {\n                console.log(\"ContractorView: Placement Dates set as: \", pd)\n                //setPlacementDates(pd)\n                console.log(\"ContractorView: Setting placementDates in redux store...\")\n                dispatch(setPlacementDates(pd));\n            } else {\n                console.log(\"ContractorView: Error with getContractorPlacementCalendar fetch call\");\n            }\n        })();\n\n    }\n\n    }, [contractorId, placements] )\n\n    const saveDates = async () => {\n        // const blocked = createBlocked(contractorId, datesBlocked)\n        dispatch(setBlocked(datesBlocked));\n\n    }\n\n    if (!contractorId) {\n        console.log('Contractor Id is not set on login');\n        return null\n    } else {\n        return (\n            <>\n                <Calendar key={\"contrCalendar\"} datesBlocked={datesBlocked} placements={placements} placementDates={placementDates} setDatesBlocked={setDatesBlocked} userType={\"contractor\"}></Calendar>\n                {/* <Calendar datesBlocked={datesBlocked} placements={placements} placementDates={placementDates} setDatesBlocked={setDatesBlocked}></Calendar> */}\n                <Button onClick={saveDates} style={{backgroundColor: \"#616161\", color: \"white\", marginTop:\"5px\", marginLeft:\"80%\"}}>SAVE</Button>\n                <ContractorPlacementTable></ContractorPlacementTable>\n            </>\n        );\n    }\n}\n\nexport default ContractorView;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/ContractorPlacementTable.js",["214","215","216"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport moment from 'moment';\n\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'companyName', numeric: false, disablePadding: true, label: 'Company Name' },\n  { id: 'contact', numeric: false, disablePadding: false, label: 'Contact' },\n  { id: 'phone', numeric: false, disablePadding: false, label: 'Phone' },\n  { id: 'email', numeric: false, disablePadding: false, label: 'Email' },\n  { id: 'address', numeric: false, disablePadding: false, label: 'Address' },\n  { id: 'startDate', numeric: false, disablePadding: false, label: 'Start Date' },\n  { id: 'endDate', numeric: false, disablePadding: false, label: 'End Date' }\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  const userType = useSelector(state => state.authentication.userType);\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Contractor Schedule\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            {/* <FilterListIcon /> */}\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    padding: '20px',\n  },\n  tableCell: {\n    paddingLeft: \"20px\",\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nconst ContractorPlacementTable = () => {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const userType = useSelector(state => state.authentication.userType);\n  const placements = useSelector(state => state.placement.placementInfo)\n  console.log(\"*****************PlacementsTable View********************\")\n\n  useEffect (() => {\n    if (placements) {\n      for (let i = 0; i < placements.length; i++) {\n        console.log(\"Placements: \", placements[i]);\n      }\n    } else {\n        console.log(\"Placements:  No placements yet...\")\n    }\n  }, [placements] )\n\n  function createData(companyName, contact, phone, email, address, startDate, endDate) {\n      return { companyName, contact, phone, email, address, startDate, endDate };\n    }\n\n  const rows = [];\n\nif(placements) {\n    const placementArr = placements.placements;\n\n    console.log(\"We have placements[0]: \", placementArr[0])\n\n\n    for (let i=0; i < placementArr.length; i++) {\n        let start = moment(placementArr[i].companyInfo.startDate).format('MM/DD/YYYY');\n        let end = moment(placementArr[i].companyInfo.endDate).format('MM/DD/YYYY');\n        let address = placementArr[i].companyInfo.address + \", \" + placementArr[i].companyInfo.city\n        rows.push(createData(\n          placementArr[i].companyInfo.companyName,\n          placementArr[i].companyInfo.name,\n          placementArr[i].companyInfo.phone,\n          placementArr[i].companyInfo.email,\n          address,\n          start.toString(),\n          end.toString(), ));\n        }\n\n      }\n      console.log(\"rows.length:  \", rows.length)\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} padding={\"none\"}/>\n        <TableContainer className={classes.tableCell}>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              paddingLeft=\"10px\"\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                    return (\n                      <TableRow key={index}>\n                        <TableCell align=\"left\">{row.companyName}</TableCell>\n                        <TableCell align=\"left\">{row.contact}</TableCell>\n                        <TableCell align=\"left\">{row.phone}</TableCell>\n                        <TableCell align=\"left\">{row.email}</TableCell>\n                        <TableCell align=\"left\">{row.address}</TableCell>\n                        <TableCell align=\"left\">{row.startDate}</TableCell>\n                        <TableCell align=\"left\">{row.endDate}</TableCell>\n                      </TableRow>\n                    )\n                })}\n\n\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}\n\nexport default ContractorPlacementTable;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/DayCard.js",["217","218","219"],"import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport moment from 'moment';\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"145px\",\n    height: \"100px\",\n    backgroundColor: \"#616161\",\n    color: \"white\",\n    borderRadius: \"4px\",\n  },\n  before: {\n    width: \"145px\",\n    height: \"100px\",\n    backgroundColor: \"#C5C9Cb\",\n    color: \"white\",\n    borderRadius: \"4px\",\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    // marginBottom: 12,\n  },\n});\nlet once = true\nexport default function DayCard({ day, placements, placementDates, handleDateClicked, userType}) {\n  // console.log(\"Calendar: placements: \", placements);\n  // console.log(\"Calendar: placementDates: \", placementDates);\n  console.log(\"************************Day Card View************************\")\n // console.log(\"PlacementDate: \", placementDates)\n console.log(\"UserType: \", userType)\n  const classes = useStyles();\n\n    function dayInPlacements(day) {\n      const dayStr = day.format('YYYY-MM-DD')\n\n      if (placementDates) {\n        if (dayStr in placementDates) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n\n      function beforeToday(day) {\n        //console.log(\"DayCard: beforeToday(day)\");\n        return moment(day).local().isBefore(new Date(), \"day\");\n      }\n\n    // const bull = <span className={classes.bullet}>•</span>;\n\nconst getPlacementInfo = (day) => {\n    let dayArray = placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(`<div key={${index}}>{${item.companyInfo.companyName}}</div>`)\n      })\n      let retVal = \"\"\n      for (let i = 0 ; i < dayArray.length; i++) {\n        retVal += dayArray[i]\n      }\n      return retVal\n}\n\nif (!day) {\n  return null\n } else if (beforeToday(day)) {\n    return (\n    <Card className={classes.before}>\n      <CardContent>\n        <div>{day.format(\"D\").toString()}</div>\n          { dayInPlacements(day) && userType===\"contractor\"  ? placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(<div key={index}>{item.companyInfo.companyName}:{item.companyInfo.name}</div>)}) : null }\n          { dayInPlacements(day) && userType===\"company\"  ? placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(<div key={index}>{item.contractorInfo.name}:{item.contractorInfo.staffType}</div>)}) : null }\n          { dayInPlacements(day) && userType==='agency' ? placementDates[day.format('YYYY-MM-DD')].map((item,index) => {\n          return(<div fontSize=\"6pt\" key={index}>{item.agencyInfo.companyName}:{item.agencyInfo.staffType}</div>)}) : null }\n      </CardContent>\n    </Card>\n    )\n  } else {\n  return (\n    <Card key={\"cardKey\" } className={classes.root}>\n      <CardContent key={\"cardContent\"} onClick={ (e) => handleDateClicked(e, day)}>\n        <div key={day.format(\"D\").toString()} >{day.format(\"D\").toString()}</div>\n\n      { dayInPlacements(day) && userType===\"contractor\"  ? placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(<div key={index}>{item.companyInfo.companyName}:{item.companyInfo.name}</div>)}) : null }\n      { dayInPlacements(day) && userType===\"company\" ? placementDates[day.format('YYYY-MM-DD')].map((item, index) => {\n          return(<div key={index}>{item.contractorInfo.name}:{item.contractorInfo.staffType}</div>)}) : null }\n      { dayInPlacements(day) && userType==='agency' ? placementDates[day.format('YYYY-MM-DD')].map((item,index) => {\n          return(<div fontSize=\"sm\" overflow=\"hidden\" key={index}>{item.agencyInfo.companyName}:{item.agencyInfo.staffType}</div>)}) : null }\n      </CardContent>\n    </Card>\n    // <div onClick={ (e) => handleDateClicked(e, day)}>{day.format(\"D\").toString()}</div>\n  );\n  }\n  }\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/GridComponent.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CalendarComponent/BlockedCard.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyView.js",["220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import moment from \"moment\";\nimport { Button } from '@material-ui/core';\nimport  AgencyPlacementTable  from './AgencyPlacementTable';\nimport Calendar from './CalendarComponent/Calendar';\nimport CompanyPlacementTable from './CompanyPlacementTable';\nimport { getAllAgencyContractorPlacementCalendarInfo, getAllAgencyContractorPlacementTableInfo, setAgencyContractorPlacementDates, setAgencyContractorPlacementInfo} from '../store/agencyCompanyPlacements';\nimport { getAllAgencyCompanyPlacementCalendarInfo, getAllAgencyCompanyPlacementTableInfo, setAgencyCompanyPlacementDates, setAgencyCompanyPlacementInfo } from \"../store/agencyCompanyPlacements\";\nimport {  getAllContractorInfo, getAllCompanyInfo, setAgencyCompanyInfo, setAgencyContractorInfo } from \"../store/agencyInfo\";\nconst AgencyView = () => {\n    console.log(\"Entered AgencyView\")\n    const dispatch = useDispatch();\n    const companyPlacementDates = useSelector( state => state.agencyCompanyPlacements.placementDates )\n    const companyPlacementInfo = useSelector ( state => state.agencyCompanyPlacements.placementInfo )\n    const contractorPlacementDates = useSelector ( state => state.agencyContractorPlacements.placementDates )\n    const contractorPlacementInfo = useSelector ( state => state.agencyContractorPlacements.placementInfo)\n    const companyInfo = useSelector (state => state.agencyInfo.companyInfo)\n    const contractorInfo = useSelector (state => state.agencyInfo.contractorInfo)\n\n    console.log(\" *********************Entered Agency View********************\")\n\n    useEffect (() => {\n\n            (async() => {\n                console.log(\"Getting placements for agency\")\n                const p = await getAllAgencyCompanyPlacementTableInfo();\n                if (!p.errors) {\n                    console.log(\"AgencyView: Placement Table Info set as:  \", p)\n                    console.log(\"AgencyView: Setting placement table info in redux store...\")\n                    dispatch(setAgencyCompanyPlacementInfo(p))\n                } else {\n                    console.log(\"AgencyView: Error in getAll AgencyCompanyPlacementTableInfo fetch call\")\n                }\n                const pd = await getAllAgencyCompanyPlacementCalendarInfo();\n                if (!pd.errors) {\n                    console.log(\"AgencyView: Placement Calendar Dates set as: \", pd)\n                    console.log(\"AgencyView: Setting placementDates in redux store...\")\n                    dispatch(setAgencyCompanyPlacementDates(pd));\n                } else {\n                    console.log(\"AgencyView: Error with getCompanyPlacementCalendar fetch call\");\n                }\n            })()\n\n    }, []) ;\n\n    const savePlacement= async () => {\n        console.log(\"save Placement to backend - needs to be implemented\")\n    }\n\n    return (\n        <>\n            <Calendar key={\"newCalendar\"} placements={companyPlacementInfo} placementDates={companyPlacementDates} datesBlocked={[]} userType={'agency'}></Calendar>\n            {/* <Calendar datesBlocked={datesBlocked} placements={placements} placementDates={placementDates} setDatesBlocked={setDatesBlocked}></Calendar> */}\n            {/* <Button key={\"buttonKey\"} onClick={savePlacement} style={{backgroundColor: \"#616161\", color: \"white\", marginTop:\"5px\", marginLeft:\"80%\"}}>SAVE</Button> */}\n            {/* <AgencyPlacementTable key={\"coPlacement\"} ></AgencyPlacementTable> */}\n        </>\n    );\n\n}\n\nexport default AgencyView;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyView.js",["237","238","239","240"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from \"moment\";\nimport { Button } from '@material-ui/core';\nimport  CompanyPlacementTable  from './CompanyPlacementTable';\nimport Calendar from './CalendarComponent/Calendar';\nimport { setCompanyId, setCompanyLocations, getCompanyInfo } from '../store/company';\nimport { getCompanyPlacementTableInfo, getCompanyPlacementCalendarInfo, setPlacementInfo, setPlacementDates } from '../store/placement';\n\nconst CompanyView = () => {\n    console.log(\"Entered CompanyView\")\n    const dispatch = useDispatch();\n    const companyId = useSelector(state => state.company.companyId);\n    const placements = useSelector(state => state.placement.placementInfo);\n    const placementDates = useSelector(state => state.placement.placementDates);\n    const companyLocations = useSelector(state => state.company.companyLocations);\n    console.log(\" *********Entered Company View**************\")\n\n    // function printRange(message, range) {\n    //     console.log(message);\n    //     for (let i = 0; i < range.length; i++) {\n    //         console.log(\"     range[\", i, \"]: \", range[i].format('MM/DD/YYYY hh:mm:ss'));\n    //     }\n    // }\n\n    function getDateRange(startDate, endDate, pdArr) {\n\n        let start = moment(startDate);\n        let end = moment(endDate);\n\n        let diff = end.diff(start, 'days') + 1;\n        let thisDay = start.local().format('MM/DD/YYYY');\n        let range = [...pdArr];\n        for (let i = 0; i < range; i++) {\n            console.log(\"     range[\", i, \"]: \", range[i].format('MM/DD/YYYY hh:mm:ss'))\n        }\n        //range.push(start)\n        for (let i = 1; i !== diff + 1; i++) {\n            let duplicate = false;\n            let tmpDay = moment(thisDay).local();\n\n            for (let k = 0; k < range.length; k++) {\n                let rangeStart = range[k].startOf('day');\n                let tmpStart = tmpDay.startOf('day');\n\n                if (rangeStart.isSame(tmpStart)) {\n                    duplicate = true;\n                }\n            }\n\n            if (!duplicate) {\n                range.push(tmpDay);\n            }\n            let tmpTmpDay = moment(tmpDay.format(\"MM/DD/YYYY hh:mm:ss\"))\n            thisDay = tmpTmpDay.add(1, 'day').format('MM/DD/YYYY hh:mm:ss')\n        }\n        for (let i = 0; i < range.length; i++) {\n            console.log(\"range[\", i, \"]: \", range[i].format('MM/DD/YYYY hh:mm:ss'));\n        }\n        return range;\n    }\n\n    useEffect (() => {\n        if (!companyId) {\n            let cid = window.localStorage.getItem(\"companyId\");\n            if (cid) {\n             dispatch(setCompanyId(cid));\n            }\n        }\n        if (!companyLocations) {\n            ( async() => {\n                const locations = await getCompanyInfo(companyId)\n                if (!locations.errors) {\n                    dispatch(setCompanyLocations(locations));\n                } else {\n                    console.log(\"CompanyView: Error in get Company Locations\")\n                }\n            })()\n        }\n        if (!placements) {\n            (async() => {\n                console.log(\"Getting placements for this company\")\n                const p = await getCompanyPlacementTableInfo(companyId);\n                if (!p.errors) {\n                    console.log(\"CompanyView: Placements set as:  \", p)\n                    console.log(\"CompanyView: Setting placement info in redux store...\")\n                    dispatch(setPlacementInfo(p))\n                } else {\n                    console.log(\"CompanyView: Error in getCompanyPlacementTableInfo fetch call\")\n                }\n                const pd = await getCompanyPlacementCalendarInfo(companyId);\n                if (!pd.errors) {\n                    console.log(\"CompanyView: Placement Dates set as: \", pd)\n                    console.log(\"CompanyView: Setting placementDates in redux store...\")\n                    dispatch(setPlacementDates(pd));\n                } else {\n                    console.log(\"CompanyView: Error with getCompanyPlacementCalendar fetch call\");\n                }\n            })()\n        }\n        console.log(\"Company placements: \", placements);\n        console.log(\"Company dates: \", placementDates);\n    },[companyId] );\n\n    const savePlacement= async () => {\n        console.log(\"save Placement to backend - needs to be implemented\")\n        //const placement = createPlacement(companyId, )\n        //dispatch(setPlacement(placement));\n    }\n\n    if (!companyId) {\n        console.log('Company Id is not set on login');\n        return null\n    } else {\n        return (\n            <>\n                <Calendar key={\"newCalendar\"} placements={placements} placementDates={placementDates} datesBlocked={[]} userType={'company'}></Calendar>\n                {/* <Calendar datesBlocked={datesBlocked} placements={placements} placementDates={placementDates} setDatesBlocked={setDatesBlocked}></Calendar> */}\n                {/* <Button key={\"buttonKey\"} onClick={savePlacement} style={{backgroundColor: \"#616161\", color: \"white\", marginTop:\"5px\", marginLeft:\"80%\"}}>SAVE</Button> */}\n                <CompanyPlacementTable key={\"coPlacement\"} ></CompanyPlacementTable>\n            </>\n        );\n    }\n}\n\nexport default CompanyView;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyPlacementTable.js",["241"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport { Table,\n         TableBody,\n        TableCell,\n        TableContainer,\n        TableHead,\n        TablePagination,\n        TableRow,\n        TableSortLabel,\n        Toolbar,\n        Typography,\n        Paper,\n        IconButton,\n        Tooltip,\n        FormControlLabel,\n        Switch } from '@material-ui/core'\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport moment from 'moment';\n\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Name' },\n  { id: 'staffType', numeric: false, disablePadding: true, label: 'Staff Type' },\n  { id: 'phone', numeric: false, disablePadding: false, label: 'Phone' },\n  { id: 'email', numeric: false, disablePadding: false, label: 'Email' },\n  { id: 'city', numeric: false, disablePadding: false, label: 'City' },\n  { id: 'startDate', numeric: false, disablePadding: false, label: 'Start Date' },\n  { id: 'endDate', numeric: false, disablePadding: false, label: 'End Date' }\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  const userType = useSelector(state => state.authentication.userType);\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Contractor Schedule\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            {/* <FilterListIcon /> */}\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    padding: '20px',\n  },\n  tableCell: {\n    paddingLeft: \"20px\",\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nconst CompanyPlacementTable = () => {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const placements = useSelector(state => state.placement.placementInfo)\n\n  console.log(\" ********************PlacementsTable View********************\")\n  useEffect (() => {\n    if (placements) {\n      for (let i = 0; i < placements.length; i++) {\n        console.log(\"Placements: \", placements[i]);\n      }\n    } else {\n        console.log(\"Placements:  No placements yet...\")\n    }\n  }, [placements] )\n\n  function createData(name, staffType, phone, email, city, startDate, endDate) {\n      return { name, staffType, phone, email, city, startDate, endDate };\n    }\n\n  const rows = [];\n\nif(placements) {\n    const placementArr = placements.placements;\n\n    console.log(\"We have placements[0]: \", placementArr[0])\n\n\n    for (let i=0; i < placementArr.length; i++) {\n        let start = moment(placementArr[i].contractorInfo.startDate).format('MM/DD/YYYY');\n        let end = moment(placementArr[i].contractorInfo.endDate).format('MM/DD/YYYY');\n        let city = placementArr[i].contractorInfo.city\n        rows.push(createData(\n          placementArr[i].contractorInfo.name,\n          placementArr[i].contractorInfo.staffType,\n          placementArr[i].contractorInfo.phone,\n          placementArr[i].contractorInfo.email,\n          city,\n          start.toString(),\n          end.toString(), ));\n        }\n\n      }\n      console.log(\"rows.length:  \", rows.length)\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} padding={\"none\"}/>\n        <TableContainer className={classes.tableCell}>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              paddingLeft=\"10px\"\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                    return (\n                      <TableRow key={index}>\n                        <TableCell align=\"left\">{row.name}</TableCell>\n                        <TableCell align=\"left\">{row.staffType}</TableCell>\n                        <TableCell align=\"left\">{row.phone}</TableCell>\n                        <TableCell align=\"left\">{row.email}</TableCell>\n                        <TableCell align=\"left\">{row.city}</TableCell>\n                        <TableCell align=\"left\">{row.startDate}</TableCell>\n                        <TableCell align=\"left\">{row.endDate}</TableCell>\n                      </TableRow>\n                    )\n                })}\n\n\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}\n\nexport default CompanyPlacementTable;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyPlacementTable.js",["242","243"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport { Table,\n         TableBody,\n        TableCell,\n        TableContainer,\n        TableHead,\n        TablePagination,\n        TableRow,\n        TableSortLabel,\n        Toolbar,\n        Typography,\n        Paper,\n        IconButton,\n        Tooltip,\n        FormControlLabel,\n        Switch } from '@material-ui/core'\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport moment from 'moment';\n\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Name' },\n  { id: 'staffType', numeric: false, disablePadding: true, label: 'Staff Type' },\n  { id: 'phone', numeric: false, disablePadding: false, label: 'Phone' },\n  { id: 'email', numeric: false, disablePadding: false, label: 'Email' },\n  { id: 'city', numeric: false, disablePadding: false, label: 'City' },\n  { id: 'startDate', numeric: false, disablePadding: false, label: 'Start Date' },\n  { id: 'endDate', numeric: false, disablePadding: false, label: 'End Date' }\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  const userType = useSelector(state => state.authentication.userType);\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Contractor Schedule\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    padding: '20px',\n  },\n  tableCell: {\n    paddingLeft: \"20px\",\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nconst AgencyPlacementTable = ({placements, placementDates}) => {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  // const agencyPlacements = useSelector(state => state.agencyPlacements.placementInfo)\n\n  console.log(\" ********************PlacementsTable View********************\")\n\n\n  useEffect (() => {\n    if (placements) {\n      for (let i = 0; i < placements.length; i++) {\n        console.log(\"Placements: \", placements[i]);\n      }\n    } else {\n        console.log(\"Placements:  No placements yet...\")\n    }\n  }, [] )\n\n  function createData(name, staffType, phone, email, city, startDate, endDate) {\n      return { name, staffType, phone, email, city, startDate, endDate };\n    }\n\n  const rows = [];\n\nif(placements) {\n    const placementArr = placements;\n\n      console.log(\"Placements is:  \", placements.length, \" ... long\")\n      for (let i=0; i < placementArr.length; i++) {\n        console.log(\"PlacementArr[\", i, \"]: \", placementArr[i])\n        console.log(\"Agency info:  \", placementArr[i].agencyInfo)\n        console.log(\"CompanyName:  \", placementArr[i].agencyInfo.companyName)\n      }\n    console.log(\"We have placements[0]: \", placementArr[0].agencyInfo)\n\n\n    for (let i=0; i < placementArr.length; i++) {\n        let start = moment(placementArr[i].agencyInfo.startDate).format('MM/DD/YYYY');\n        let end = moment(placementArr[i].agencyInfo.endDate).format('MM/DD/YYYY');\n        let city = placementArr[i].agencyInfo.contractorCity\n        rows.push(createData(\n          placementArr[i].agencyInfo.contractorName,\n          placementArr[i].agencyInfo.staffType,\n          placementArr[i].agencyInfo.contractorPhone,\n          placementArr[i].agencyInfo.contractorEmail,\n          city,\n          start.toString(),\n          end.toString(),\n          ));\n        }\n\n      }\n      console.log(\"rows.length:  \", rows.length)\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} padding={\"none\"}/>\n        <TableContainer className={classes.tableCell}>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              paddingLeft=\"10px\"\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                    return (\n                      <TableRow key={index}>\n                        <TableCell align=\"left\">{row.name}</TableCell>\n                        <TableCell align=\"left\">{row.staffType}</TableCell>\n                        <TableCell align=\"left\">{row.phone}</TableCell>\n                        <TableCell align=\"left\">{row.email}</TableCell>\n                        <TableCell align=\"left\">{row.city}</TableCell>\n                        <TableCell align=\"left\">{row.startDate}</TableCell>\n                        <TableCell align=\"left\">{row.endDate}</TableCell>\n                      </TableRow>\n                    )\n                })}\n\n\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}\n\nexport default AgencyPlacementTable;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyAddPlacement.js",["244","245","246","247","248"],"import 'date-fns';\nimport React, { useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport { setCompanyId } from '../store/company'\nimport { getContractorAvail } from '../store/contractor';\nimport Alert from '@material-ui/lab/Alert'\nimport { Button,\n         DialogContent,\n         FormControl,\n         Grid,\n         InputLabel,\n         MenuItem,\n         Select,\n         Typography,\n        } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CompanyPlacementPickerTable from './CompanyPlacementPickerTable';\nimport { setAvailableContractors } from '../store/contractor';\nimport { formatDateString } from '../utils/utils';\n\nexport default function CompanyAddPlacement() {\n  // The first commit of Material-UI\n  console.log(\" *********************Company Add Placement View********************\")\n  const companyId = useSelector(state => state.authentication.companyId);\n  const dispatch = useDispatch();\n  const [errors, setErrors] = useState('');\n  const [state, setLocalState] = useState('');\n  const [staffType, setLocalStaffType] = useState('');\n  const [location, setLocation] = useState('');\n  const [values, setValues] = useState({\n    staffType: '',\n    startDate: '',\n    endDate: '',\n  });\n  const [selectedDateFrom, setSelectedDateFrom] = React.useState(new Date());\n  const [selectedDateTo, setSelectedDateTo] = React.useState(new Date());\n  const contractorsAvailable = [];\n  const locations = useSelector( state => state.company.companyLocations);\n\n  if (locations) {\n      console.log(\"Locations: \", locations)\n      console.log(\"Locations size: \", locations.companyContacts.length)\n      for(let i = 0; i < locations.companyContacts.length; i++) {\n        console.log(locations.companyContacts[i].name)\n        console.log(locations.companyContacts[i].addr1 + \" \" + locations.companyContacts[i].addr2)\n        console.log(locations.companyContacts[i].city)\n      }\n  }\n  const handleDateChangeFrom = (date) => {\n    setSelectedDateFrom(date);\n  };\n  const handleDateChangeTo = (date) => {\n    setSelectedDateTo(date);\n  };\n  const useStyles = makeStyles((theme) => ({\n    MuiGrid: {\n        width: \"80%\"\n    },\n    MuiDialogActions: {\n        justifyContent: \"space-around\"\n    },\n    img: {\n        display: \"block\",\n        width: \"40%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n    },\n    root: {\n        color: theme.primary,\n        input: {\n            textAlign: \"center\"\n        },\n        width: \"75%\",\n        justifyContent: 'space-between'\n    },\n    select: {\n        minWidth: \"200px\",\n    }\n  }));\n  const classes = useStyles();\n\n  const submit = async (e) => {\n    e.preventDefault();\n\n    //   const contractor = await addContractor(userId, staffType);\n    //   if (!contractor.errors) {\n\n        // if (!contractorContact.errors) {\n\n        // } else {\n\n        // }\n    // } else {\n        // setErrors(contractor.errors);\n    // }\n}\n  const cancel = () => {\n      console.log(\"CompanyAddPlacement: Cancel button pressed, should be redirecting to '/' ...\");\n    // return <Redirect to=\"/\" />\n  }\n\n  const handleChange = (prop) => (event) => {\n    setValues({...values, [prop]: event.target.value});\n  }\n\n  //Because the select didn't work with handleChange at all\n  const handleStateChange = (event) => {\n    setLocalState(event.target.value);\n  };\n\n  const handleStaffTypeChange = (event) => {\n      setLocalStaffType(event.target.value);\n  }\n\n\n\n  // const formatValue = (val) => {\n  //   if (parseInt(val) < 10) {\n  //     val = \"0\" + val;\n  //   }\n  //   return val\n  // }\n\n  // const formatDateString = (date) => {\n  //   let year = date.getFullYear();\n  //   let month = date.getMonth();\n  //   month = formatValue(month)\n  //   let day = date.getDay();\n  //   day = formatValue(day)\n  //   // let hour = date.getHours();\n  //   // hour = formatValue(hour)\n  //   // let minute = date.getMinutes();\n  //   // minute = formatValue(minute)\n  //   let hour = \"00\"\n  //   let minute = \"00\"\n  //   return year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + \"00\"\n  // }\n\n  const search = async() => {\n    setErrors('');\n    //localhost:5000/api/contractor/available?staffType=Dental%20Assistant&\n    //dateRange=2021-01-19%2000:00:00/2021-01-25 00:00:00\n    let diff = selectedDateFrom - selectedDateTo;\n\n    if (diff > 0) {\n      setErrors('Ending date must be greater than or equal to beginning date.')\n    }\n    console.log(\"CompanyAddPlacement: selectedDateFrom orig: \", selectedDateFrom)\n    console.log(\"CompanyAddPlacement: selectedDateTo orig: \", selectedDateTo);\n    const dateFrom = formatDateString(selectedDateFrom);\n    const dateTo = formatDateString(selectedDateTo);\n    console.log(\"CompanyAddPlacement: after formatting selectedDateFrom: \", dateFrom)\n    console.log(\"CompanyAddPlacement: after formatting selectedDateTo: \", dateTo)\n\n    if (staffType === '') {\n      setErrors(\"Staff type must be selected\")\n    }\n\n\n    if (errors === '') {\n      (async() => {\n        const contractors = await getContractorAvail(staffType, dateFrom, dateTo)\n        if (!contractors.errors) {\n          console.log(\"Received contractors: \", contractors)\n          dispatch(setAvailableContractors(contractors))\n        } else {\n          setErrors(\"Problem processing request.\")\n          console.log(\"Problem receiving contractors\");\n        }\n\n      })()\n    }\n  }\n\n  const handleLocationChange = (event) => {\n    setLocation(event.target.value);\n  }\n\n  if (!companyId) {\n    console.log(\"Setting companyId in redux store\")\n    const cid = window.localStorage.getItem(\"companyId\");\n    dispatch(setCompanyId(cid));\n  return (\n    <>\n    <DialogContent style={{width:\"100%\", marginLeft:\"auto\", marginRight:\"auto\", justifyContent:\"center\"}}>\n      <Typography component=\"h6\" variant=\"h6\" align=\"center\" color=\"primary\" style={{marginTop: \"20px\", fontWeight:\"bold\"}}>Select your staffing needs ...</Typography>\n    </DialogContent>\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container direction=\"column\" justify=\"space-around\" alignItems=\"center\" spacing={2}>\n              <div className={classes.root}>\n                {errors ? <Alert severity=\"error\">{errors}</Alert> : <div></div> }\n              </div>\n              <ValidatorForm\n                  onSubmit={submit}\n                  //style={{width:\"75%\",}}\n                  >\n                  <br />\n\n                  <FormControl  variant=\"outlined\"  className={classes.formControl}>\n                    { locations && locations.companyContacts.length > 1 ?\n                    <>\n                      <InputLabel   id=\"staffType\">Choose location </InputLabel>\n                      <Select\n                        labelId=\"location\"\n                        id=\"location\"\n                        value={location}\n                        onChange={handleLocationChange}\n                        label=\"staffType\"\n                        className={classes.select}\n                      >\n                      { locations.companyContacts.map( (location, idx) => {\n                        return (\n                          <MenuItem key={location.id} value={location.id}>{location.name}<br/>{location.addr1 + \" \" + location.addr2}<br/>{location.city}</MenuItem>\n                        )\n                      })}\n                      </Select>\n                      </> : null }\n\n                    </FormControl>\n\n\n                    <FormControl  variant=\"outlined\"  className={classes.formControl}>\n                    <InputLabel   id=\"staffType\">Choose staff type</InputLabel>\n                    <Select\n                      labelId=\"staffType\"\n                      id=\"staffType\"\n                      value={staffType}\n                      onChange={handleStaffTypeChange}\n                      label=\"staffType\"\n                      className={classes.select}\n                    >\n                    <MenuItem value=\"\"><em>None</em></MenuItem>\n                    <MenuItem value={\"Dental Assistant\"}>Dental Assistant</MenuItem>\n                    <MenuItem value={\"Dentist\"}>Dentist</MenuItem>\n                    <MenuItem value={\"Front Office\"}>Front Office</MenuItem>\n                    <MenuItem value={\"Back Office\"}>Back Office</MenuItem>\n                    <MenuItem value={\"Dental Hygenist\"}>Dental Hygenist</MenuItem>\n                    </Select>\n                  </FormControl>\n                </ValidatorForm>\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog-from\"\n            label=\"Select Starting Date\"\n            format=\"MM/dd/yyyy\"\n            value={selectedDateFrom}\n            onChange={handleDateChangeFrom}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog-to\"\n            label=\"Select Ending Date\"\n            format=\"MM/dd/yyyy\"\n            value={selectedDateTo}\n            onChange={handleDateChangeTo}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n           <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    type=\"button\"\n                    className=\"cancel\"\n                    value=\"Submit without validation\"\n                    onClick={search}\n                    style={{marginTop:\"20px\", justifyContent:\"center\", marginBottom:\"20px\", marginLeft:\"20%\", marginRight:\"0px\"}}\n                  >\n                    {\n                        ('Search')\n                    }\n                  </Button>\n\n            { contractorsAvailable.map((contractor, index) => {\n              <div key={index}>{contractor}</div>\n            })}\n        </Grid>\n        </MuiPickersUtilsProvider>\n        <CompanyPlacementPickerTable locationId={location} startDate={selectedDateFrom} endDate={selectedDateTo}></CompanyPlacementPickerTable>\n\n</>\n  );\n}\n}\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/CompanyPlacementPickerTable.js",["249","250","251","252","253","254","255","256","257"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { useSelector } from 'react-redux';\nimport { formatDateString } from '../utils/utils'\nimport { createPlacement } from '../store/placement';\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'Name' },\n  { id: 'staffType', numeric: true, disablePadding: false, label: 'Staff Type' },\n  { id: 'phone', numeric: true, disablePadding: false, label: 'Phone' },\n  { id: 'email', numeric: true, disablePadding: false, label: 'Email' },\n  { id: 'city', numeric: true, disablePadding: false, label: 'City' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          {/* <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n            display=\"none\"\n          /> */}\n        </TableCell>\n        {/* <TableRow>\n\n        </TableRow> */}\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n  contractorSelected: PropTypes.string,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n  const { contractorSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {/* {numSelected} selected */}\n          { contractorSelected } selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Available Contractors\n        </Typography>\n      )}\n\n      {numSelected > 1 ? (\n        // <Tooltip title=\"Delete\">\n        //   <IconButton aria-label=\"delete\">\n        //     <DeleteIcon />\n        //   </IconButton>\n        // </Tooltip>\n        null\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            {/* <FilterListIcon /> */}\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  contractorSelected: PropTypes.string.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function CompanyPlacementPickerTable({locationId, startDate, endDate}) {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('name');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [contractorId, setContractorId] = React.useState();\n  const [selectedContractorName, setSelectedContractorName] = React.useState();\n  const [selectedContractorId, setSelectedContractorId] = React.useState();\n  const rows = [];\n  const ac = useSelector( state => state.contractor.availableContractors)\n  const companyId = useSelector ( state => state.company.companyId)\n\n  let availableContractors;\n  if (ac) {\n    availableContractors = ac.available\n    console.log(availableContractors);\n    if (availableContractors) {\n        for (let i=0; i < availableContractors.length; i++) {\n            console.log(\"Available: \", availableContractors[i].staffType)\n        }\n    }\n}\n  function createData(id, name, staffType, phone, email, city) {\n    return { id, name, staffType, phone, email, city };\n  }\n\n  if(availableContractors) {\n      for (let i=0; i < availableContractors.length; i++) {\n          let id = availableContractors[i].contact[\"id\"];\n          let name = availableContractors[i].contact[\"name\"];\n          let staffType = availableContractors[i].staffType;\n          let phone = availableContractors[i].contact[\"phone\"];\n          let email = availableContractors[i].contact[\"email\"];\n          let city = availableContractors[i].contact[\"city\"];\n\n        rows.push(\n            createData(id, name, staffType, phone, email, city),\n        );\n        }\n    }\n\n\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.name);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const getSelectedContractorInfo = (id) => {\n\n  }\n\n  const handleClick = (event, name, id) => {\n    if (selected.length > 0) {\n        setSelected([])\n        setSelectedContractorName('');\n        setSelectedContractorId('');\n    } else {\n        //const selectedIndex = selected.indexOf(name);\n        setSelected([id]);\n        setSelectedContractorName(name);\n        setSelectedContractorId(id);\n        console.log(\"Selected:  \", selectedContractorId);\n        console.log(\"Selected contractor name: \", selectedContractorName)\n        //let newSelected = [];\n    setSelected(name);\n    console.log(\"Set selected is now (from newSelected): \", selected)\n}\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  const isSelected = (name) => selected.indexOf(name) !== -1;\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  const confirmRequest = async() => {\n\n\n    console.log(\"Confirming request...\")\n    console.log(\"companyId: \", companyId, \" ContractorId: \", selectedContractorId, \" LocationId: \", locationId)\n\n    const sd = formatDateString(startDate);\n    const ed = formatDateString(endDate);\n    console.log(\"startDate: \", sd)\n    console.log(\"endDate: \", ed)\n    //companyId, contractorId, companyContactId, startDate, endDate\n    const placement = await createPlacement(companyId, selectedContractorId, locationId, sd, ed)\n    if (!placement.errors) {\n        console.log(\"No placement errors\")\n    } else {\n        console.log(\"Error creating placement.\")\n    }\n  }\n\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} contractorSelected={''}/>\n        {/* <EnhancedTableToolbar numSelected={0} contractorSelected={''} /> */}\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n            //   contractorSelected={contractorSelected}\n              order={order}\n              orderBy={orderBy}\n            //   onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.name);\n                  const labelId = `${row.id}`;\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.name, row.id)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.name}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.staffType}</TableCell>\n                      <TableCell align=\"right\">{row.phone}</TableCell>\n                      <TableCell align=\"right\">{row.email}</TableCell>\n                      <TableCell align=\"right\">{row.city}</TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        { selected.length > 0 ?\n        <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    type=\"button\"\n                    className=\"confirmRequest\"\n                    value=\"Submit without validation\"\n                    onClick={confirmRequest}\n                    style={{marginTop:\"20px\", justifyContent:\"center\", marginBottom:\"20px\", marginLeft:\"20%\", marginRight:\"0px\"}}\n                  >\n                    {\n                        ('Confirm Request')\n                    }\n                  </Button>\n                  : null }\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      {/* <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      /> */}\n    </div>\n  );\n}\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/utils/utils.js",["258"],"const formatValue = (val) => {\n    if (parseInt(val) < 10) {\n      val = \"0\" + val;\n    }\n    return val\n  }\n\nexport const formatDateString = (date) => {\n    console.log(\"Received date: \", date)\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    month = formatValue(month)\n    let day = date.getDate();\n    day = formatValue(day)\n    console.log(\"Formatted date: \")\n    console.log(\"  year: \", year);\n    console.log(\"  month: \", month);\n    console.log(\"  day: \", day);\n    // let hour = date.getHours();\n    // hour = formatValue(hour)\n    // let minute = date.getMinutes();\n    // minute = formatValue(minute)\n    let hour = \"00\"\n    let minute = \"00\"\n    return year + \"-\" + month + \"-\" + day + \" \" + hour + \":\" + minute + \":\" + \"00\"\n  }\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/agencyInfo.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyCompanies.js",["259","260"],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyContractors.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyCompanyPlacementTable.js",["261","262","263","264","265"],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/agencyCompanyPlacements.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/store/agencyContractorPlacements.js",[],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyContractorPlacementTable.js",["266","267","268"],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyContractorPlacements.js",["269"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AgencyContractorPlacementTable from './AgencyContractorPlacementTable';\nimport { setAgencyCompanyPlacementDates, setAgencyCompanyPlacementInfo, getAllAgencyCompanyPlacementCalendarInfo, getAllAgencyCompanyPlacementTableInfo } from '../store/agencyCompanyPlacements';\n\n\nconst AgencyContractorPlacements = () => {\n    console.log(\"********************AGENCY CONTRACTOR PLACEMENTS****************************\")\n    const dispatch = useDispatch();\n    const placements = useSelector ( store => store.agencyCompanyPlacements )\n    const placementDates = useSelector ( store => store.agencyCompanyPlacements.placementDates )\n\n    useEffect (() => {\n            (async() => {\n                const p = await getAllAgencyCompanyPlacementTableInfo();\n                if (!p.errors) {\n                    console.log(\"CompanyView: Placement table info set as:  \", p.placements)\n                    console.log(\"CompanyView: Setting placement info in redux store...\")\n                    dispatch(setAgencyCompanyPlacementInfo(p.agencyInfo))\n                } else {\n                    console.log(\"CompanyView: Error in getCompanyPlacementTableInfo fetch call\")\n                }\n                const pd = await getAllAgencyCompanyPlacementCalendarInfo();\n                if (!pd.errors) {\n                    console.log(\"CompanyView: Placement Dates set as: \", pd)\n                    console.log(\"CompanyView: Setting placementDates in redux store...\")\n                    dispatch(setAgencyCompanyPlacementDates(pd));\n                } else {\n                    console.log(\"CompanyView: Error with getCompanyPlacementCalendar fetch call\");\n                }\n            })()\n        console.log(\"Company placements: \", placements);\n\n        console.log(\"Company dates: \", placementDates);\n    },[] );\n\nreturn (\n    // <div>Agency Placement Table</div>\n    <AgencyContractorPlacementTable placements={placements.placementInfo} placementDates={placementDates}></AgencyContractorPlacementTable>\n)\n}\n\nexport default AgencyContractorPlacements;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyCompanyPlacements.js",["270"],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AgencyCompanyPlacementTable from './AgencyCompanyPlacementTable';\nimport { setAgencyCompanyPlacementDates, setAgencyCompanyPlacementInfo, getAllAgencyCompanyPlacementCalendarInfo, getAllAgencyCompanyPlacementTableInfo } from '../store/agencyCompanyPlacements';\n\n\nconst AgencyCompanyPlacements = () => {\n    console.log(\"********************AGENCY COMPANY PLACEMENTS****************************\")\n    const dispatch = useDispatch();\n    const placements = useSelector ( store => store.agencyCompanyPlacements )\n    const placementDates = useSelector ( store => store.agencyCompanyPlacements.placementDates )\n\n    useEffect (() => {\n            (async() => {\n                const p = await getAllAgencyCompanyPlacementTableInfo();\n                if (!p.errors) {\n                    dispatch(setAgencyCompanyPlacementInfo(p.agencyInfo))\n                } else {\n                }\n                const pd = await getAllAgencyCompanyPlacementCalendarInfo();\n                if (!pd.errors) {\n                    dispatch(setAgencyCompanyPlacementDates(pd));\n                } else {\n\n                }\n            })()\n        console.log(\"Company placements: \", placements);\n\n        console.log(\"Company dates: \", placementDates);\n    },[] );\n\nreturn (\n    // <div>Agency Placement Table</div>\n    <AgencyCompanyPlacementTable placements={placements.placementInfo} placementDates={placementDates}></AgencyCompanyPlacementTable>\n)\n}\n\nexport default AgencyCompanyPlacements;\n","/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyCompanyTable.js",["271","272","273","274","275","276","277"],"/Users/marylark/Desktop/appacademy/Scheduler/react-app/src/components/AgencyContractorsTable.js",["278","279","280","281","282","283","284","285"],{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","severity":1,"message":"291","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":21},{"ruleId":"290","severity":1,"message":"294","line":6,"column":10,"nodeType":"292","messageId":"293","endLine":6,"endColumn":33},{"ruleId":"290","severity":1,"message":"295","line":21,"column":14,"nodeType":"292","messageId":"293","endLine":21,"endColumn":26},{"ruleId":"296","severity":1,"message":"297","line":97,"column":8,"nodeType":"298","endLine":97,"endColumn":34,"suggestions":"299"},{"ruleId":"290","severity":1,"message":"300","line":23,"column":8,"nodeType":"292","messageId":"293","endLine":23,"endColumn":22},{"ruleId":"290","severity":1,"message":"301","line":69,"column":9,"nodeType":"292","messageId":"293","endLine":69,"endColumn":17},{"ruleId":"290","severity":1,"message":"301","line":207,"column":9,"nodeType":"292","messageId":"293","endLine":207,"endColumn":17},{"ruleId":"290","severity":1,"message":"291","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":21},{"ruleId":"290","severity":1,"message":"302","line":35,"column":5,"nodeType":"292","messageId":"293","endLine":35,"endColumn":9},{"ruleId":"290","severity":1,"message":"303","line":63,"column":7,"nodeType":"292","messageId":"293","endLine":63,"endColumn":23},{"ruleId":"290","severity":1,"message":"304","line":4,"column":10,"nodeType":"292","messageId":"293","endLine":4,"endColumn":16},{"ruleId":"290","severity":1,"message":"305","line":5,"column":9,"nodeType":"292","messageId":"293","endLine":5,"endColumn":29},{"ruleId":"290","severity":1,"message":"306","line":7,"column":8,"nodeType":"292","messageId":"293","endLine":7,"endColumn":29},{"ruleId":"290","severity":1,"message":"307","line":8,"column":10,"nodeType":"292","messageId":"293","endLine":8,"endColumn":53},{"ruleId":"290","severity":1,"message":"308","line":8,"column":55,"nodeType":"292","messageId":"293","endLine":8,"endColumn":95},{"ruleId":"290","severity":1,"message":"309","line":8,"column":97,"nodeType":"292","messageId":"293","endLine":8,"endColumn":130},{"ruleId":"290","severity":1,"message":"310","line":8,"column":132,"nodeType":"292","messageId":"293","endLine":8,"endColumn":164},{"ruleId":"290","severity":1,"message":"311","line":10,"column":11,"nodeType":"292","messageId":"293","endLine":10,"endColumn":31},{"ruleId":"290","severity":1,"message":"312","line":10,"column":33,"nodeType":"292","messageId":"293","endLine":10,"endColumn":50},{"ruleId":"290","severity":1,"message":"313","line":10,"column":52,"nodeType":"292","messageId":"293","endLine":10,"endColumn":72},{"ruleId":"290","severity":1,"message":"314","line":10,"column":74,"nodeType":"292","messageId":"293","endLine":10,"endColumn":97},{"ruleId":"290","severity":1,"message":"315","line":16,"column":11,"nodeType":"292","messageId":"293","endLine":16,"endColumn":35},{"ruleId":"290","severity":1,"message":"316","line":17,"column":11,"nodeType":"292","messageId":"293","endLine":17,"endColumn":34},{"ruleId":"290","severity":1,"message":"317","line":18,"column":11,"nodeType":"292","messageId":"293","endLine":18,"endColumn":22},{"ruleId":"290","severity":1,"message":"318","line":19,"column":11,"nodeType":"292","messageId":"293","endLine":19,"endColumn":25},{"ruleId":"296","severity":1,"message":"297","line":45,"column":8,"nodeType":"298","endLine":45,"endColumn":10,"suggestions":"319"},{"ruleId":"290","severity":1,"message":"320","line":47,"column":11,"nodeType":"292","messageId":"293","endLine":47,"endColumn":24},{"ruleId":"290","severity":1,"message":"304","line":4,"column":10,"nodeType":"292","messageId":"293","endLine":4,"endColumn":16},{"ruleId":"290","severity":1,"message":"295","line":26,"column":14,"nodeType":"292","messageId":"293","endLine":26,"endColumn":26},{"ruleId":"296","severity":1,"message":"321","line":103,"column":7,"nodeType":"298","endLine":103,"endColumn":18,"suggestions":"322"},{"ruleId":"290","severity":1,"message":"320","line":105,"column":11,"nodeType":"292","messageId":"293","endLine":105,"endColumn":24},{"ruleId":"290","severity":1,"message":"301","line":68,"column":9,"nodeType":"292","messageId":"293","endLine":68,"endColumn":17},{"ruleId":"290","severity":1,"message":"301","line":69,"column":9,"nodeType":"292","messageId":"293","endLine":69,"endColumn":17},{"ruleId":"296","severity":1,"message":"323","line":221,"column":6,"nodeType":"298","endLine":221,"endColumn":8,"suggestions":"324"},{"ruleId":"290","severity":1,"message":"325","line":33,"column":10,"nodeType":"292","messageId":"293","endLine":33,"endColumn":15},{"ruleId":"290","severity":1,"message":"326","line":103,"column":9,"nodeType":"292","messageId":"293","endLine":103,"endColumn":15},{"ruleId":"290","severity":1,"message":"327","line":108,"column":9,"nodeType":"292","messageId":"293","endLine":108,"endColumn":21},{"ruleId":"290","severity":1,"message":"328","line":113,"column":9,"nodeType":"292","messageId":"293","endLine":113,"endColumn":26},{"ruleId":"329","severity":1,"message":"330","line":283,"column":60,"nodeType":"331","messageId":"332","endLine":283,"endColumn":62},{"ruleId":"290","severity":1,"message":"300","line":20,"column":8,"nodeType":"292","messageId":"293","endLine":20,"endColumn":22},{"ruleId":"290","severity":1,"message":"333","line":60,"column":20,"nodeType":"292","messageId":"293","endLine":60,"endColumn":36},{"ruleId":"290","severity":1,"message":"334","line":60,"column":54,"nodeType":"292","messageId":"293","endLine":60,"endColumn":65},{"ruleId":"290","severity":1,"message":"335","line":60,"column":67,"nodeType":"292","messageId":"293","endLine":60,"endColumn":75},{"ruleId":"290","severity":1,"message":"336","line":214,"column":10,"nodeType":"292","messageId":"293","endLine":214,"endColumn":22},{"ruleId":"290","severity":1,"message":"337","line":214,"column":24,"nodeType":"292","messageId":"293","endLine":214,"endColumn":39},{"ruleId":"290","severity":1,"message":"338","line":258,"column":9,"nodeType":"292","messageId":"293","endLine":258,"endColumn":29},{"ruleId":"290","severity":1,"message":"339","line":267,"column":9,"nodeType":"292","messageId":"293","endLine":267,"endColumn":34},{"ruleId":"290","severity":1,"message":"340","line":298,"column":9,"nodeType":"292","messageId":"293","endLine":298,"endColumn":26},{"ruleId":"341","severity":1,"message":"342","line":25,"column":77,"nodeType":"343","messageId":"344","endLine":25,"endColumn":78},{"ruleId":"290","severity":1,"message":"345","line":9,"column":11,"nodeType":"292","messageId":"293","endLine":9,"endColumn":20},{"ruleId":"296","severity":1,"message":"297","line":22,"column":4,"nodeType":"298","endLine":22,"endColumn":6,"suggestions":"346"},{"ruleId":"290","severity":1,"message":"300","line":23,"column":8,"nodeType":"292","messageId":"293","endLine":23,"endColumn":22},{"ruleId":"290","severity":1,"message":"301","line":70,"column":9,"nodeType":"292","messageId":"293","endLine":70,"endColumn":17},{"ruleId":"296","severity":1,"message":"323","line":222,"column":6,"nodeType":"298","endLine":222,"endColumn":8,"suggestions":"347"},{"ruleId":"290","severity":1,"message":"348","line":237,"column":13,"nodeType":"292","messageId":"293","endLine":237,"endColumn":17},{"ruleId":"290","severity":1,"message":"349","line":238,"column":13,"nodeType":"292","messageId":"293","endLine":238,"endColumn":31},{"ruleId":"290","severity":1,"message":"300","line":23,"column":8,"nodeType":"292","messageId":"293","endLine":23,"endColumn":22},{"ruleId":"290","severity":1,"message":"301","line":70,"column":9,"nodeType":"292","messageId":"293","endLine":70,"endColumn":17},{"ruleId":"296","severity":1,"message":"323","line":222,"column":6,"nodeType":"298","endLine":222,"endColumn":8,"suggestions":"350"},{"ruleId":"296","severity":1,"message":"351","line":35,"column":7,"nodeType":"298","endLine":35,"endColumn":9,"suggestions":"352"},{"ruleId":"296","severity":1,"message":"351","line":30,"column":7,"nodeType":"298","endLine":30,"endColumn":9,"suggestions":"353"},{"ruleId":"290","severity":1,"message":"354","line":17,"column":9,"nodeType":"292","messageId":"293","endLine":17,"endColumn":19},{"ruleId":"290","severity":1,"message":"355","line":18,"column":9,"nodeType":"292","messageId":"293","endLine":18,"endColumn":16},{"ruleId":"290","severity":1,"message":"356","line":22,"column":8,"nodeType":"292","messageId":"293","endLine":22,"endColumn":18},{"ruleId":"290","severity":1,"message":"300","line":23,"column":8,"nodeType":"292","messageId":"293","endLine":23,"endColumn":22},{"ruleId":"290","severity":1,"message":"357","line":24,"column":8,"nodeType":"292","messageId":"293","endLine":24,"endColumn":14},{"ruleId":"290","severity":1,"message":"301","line":68,"column":9,"nodeType":"292","messageId":"293","endLine":68,"endColumn":17},{"ruleId":"296","severity":1,"message":"297","line":218,"column":4,"nodeType":"298","endLine":218,"endColumn":6,"suggestions":"358"},{"ruleId":"290","severity":1,"message":"354","line":17,"column":9,"nodeType":"292","messageId":"293","endLine":17,"endColumn":19},{"ruleId":"290","severity":1,"message":"355","line":18,"column":9,"nodeType":"292","messageId":"293","endLine":18,"endColumn":16},{"ruleId":"290","severity":1,"message":"356","line":22,"column":8,"nodeType":"292","messageId":"293","endLine":22,"endColumn":18},{"ruleId":"290","severity":1,"message":"300","line":23,"column":8,"nodeType":"292","messageId":"293","endLine":23,"endColumn":22},{"ruleId":"290","severity":1,"message":"357","line":24,"column":8,"nodeType":"292","messageId":"293","endLine":24,"endColumn":14},{"ruleId":"290","severity":1,"message":"301","line":68,"column":9,"nodeType":"292","messageId":"293","endLine":68,"endColumn":17},{"ruleId":"296","severity":1,"message":"297","line":218,"column":4,"nodeType":"298","endLine":218,"endColumn":6,"suggestions":"359"},{"ruleId":"290","severity":1,"message":"360","line":231,"column":13,"nodeType":"292","messageId":"293","endLine":231,"endColumn":27},"no-native-reassign",["361"],"no-negated-in-lhs",["362"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","'getContractorPlacements' is defined but never used.","'getDateRange' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["363"],"'FilterListIcon' is defined but never used.","'userType' is assigned a value but never used.","'once' is assigned a value but never used.","'getPlacementInfo' is assigned a value but never used.","'Button' is defined but never used.","'AgencyPlacementTable' is defined but never used.","'CompanyPlacementTable' is defined but never used.","'getAllAgencyContractorPlacementCalendarInfo' is defined but never used.","'getAllAgencyContractorPlacementTableInfo' is defined but never used.","'setAgencyContractorPlacementDates' is defined but never used.","'setAgencyContractorPlacementInfo' is defined but never used.","'getAllContractorInfo' is defined but never used.","'getAllCompanyInfo' is defined but never used.","'setAgencyCompanyInfo' is defined but never used.","'setAgencyContractorInfo' is defined but never used.","'contractorPlacementDates' is assigned a value but never used.","'contractorPlacementInfo' is assigned a value but never used.","'companyInfo' is assigned a value but never used.","'contractorInfo' is assigned a value but never used.",["364"],"'savePlacement' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'companyLocations', 'dispatch', 'placementDates', and 'placements'. Either include them or remove the dependency array.",["365"],"React Hook useEffect has a missing dependency: 'placements'. Either include it or remove the dependency array.",["366"],"'state' is assigned a value but never used.","'cancel' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleStateChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'contractorId' is assigned a value but never used.","'setContractorId' is assigned a value but never used.","'handleSelectAllClick' is assigned a value but never used.","'getSelectedContractorInfo' is assigned a value but never used.","'handleChangeDense' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'companies' is assigned a value but never used.",["367"],["368"],"'city' is assigned a value but never used.","'companyContactName' is assigned a value but never used.",["369"],"React Hook useEffect has missing dependencies: 'dispatch', 'placementDates', and 'placements'. Either include them or remove the dependency array.",["370"],["371"],"'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'DeleteIcon' is defined but never used.","'moment' is defined but never used.",["372"],["373"],"'contractorName' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"376","fix":"382"},{"desc":"380","fix":"383"},{"desc":"380","fix":"384"},{"desc":"385","fix":"386"},{"desc":"385","fix":"387"},{"desc":"376","fix":"388"},{"desc":"376","fix":"389"},"Update the dependencies array to be: [contractorId, dispatch, placements]",{"range":"390","text":"391"},"Update the dependencies array to be: [dispatch]",{"range":"392","text":"393"},"Update the dependencies array to be: [companyId, companyLocations, dispatch, placementDates, placements]",{"range":"394","text":"395"},"Update the dependencies array to be: [placements]",{"range":"396","text":"397"},{"range":"398","text":"393"},{"range":"399","text":"397"},{"range":"400","text":"397"},"Update the dependencies array to be: [dispatch, placementDates, placements]",{"range":"401","text":"402"},{"range":"403","text":"402"},{"range":"404","text":"393"},{"range":"405","text":"393"},[4547,4573],"[contractorId, dispatch, placements]",[2761,2763],"[dispatch]",[4280,4291],"[companyId, companyLocations, dispatch, placementDates, placements]",[6202,6204],"[placements]",[716,718],[6352,6354],[6306,6308],[1898,1900],"[dispatch, placementDates, placements]",[1343,1345],[6186,6188],[6067,6069]]